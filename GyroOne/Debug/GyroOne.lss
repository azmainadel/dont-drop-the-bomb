
GyroOne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000252e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  0000252e  000025c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  0080011c  0080011c  0000267e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000267e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000350f  00000000  00000000  0000292e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  00005e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eac  00000000  00000000  0000656b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000082c  00000000  00000000  00007418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c6  00000000  00000000  00007c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000287b  00000000  00000000  0000830a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  0000ab85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <main>
      8a:	0c 94 95 12 	jmp	0x252a	; 0x252a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HC595Init>:
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
	else
	pinChange(D4,0);
      92:	87 b3       	in	r24, 0x17	; 23
      94:	87 60       	ori	r24, 0x07	; 7
      96:	87 bb       	out	0x17, r24	; 23
      98:	08 95       	ret

0000009a <HC595Pulse>:

	if(a & 32)
      9a:	c1 9a       	sbi	0x18, 1	; 24
      9c:	c1 98       	cbi	0x18, 1	; 24
	pinChange(D5,1);
      9e:	08 95       	ret

000000a0 <HC595Latch>:
      a0:	c2 9a       	sbi	0x18, 2	; 24
      a2:	c2 98       	cbi	0x18, 2	; 24
      a4:	08 95       	ret

000000a6 <HC595Write>:
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
	else
	pinChange(D5,0);
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	c8 2e       	mov	r12, r24
	
	if(a & 64)
      b8:	d6 2e       	mov	r13, r22
      ba:	f4 2e       	mov	r15, r20
	pinChange(D6,1);
      bc:	12 2f       	mov	r17, r18
      be:	c0 e0       	ldi	r28, 0x00	; 0
      c0:	d0 e0       	ldi	r29, 0x00	; 0
      c2:	c8 30       	cpi	r28, 0x08	; 8
      c4:	d1 05       	cpc	r29, r1
      c6:	60 f4       	brcc	.+24     	; 0xe0 <HC595Write+0x3a>
      c8:	ee 20       	and	r14, r14
	else
	pinChange(D6,0);
      ca:	14 f4       	brge	.+4      	; 0xd0 <HC595Write+0x2a>
      cc:	c0 9a       	sbi	0x18, 0	; 24
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <HC595Write+0x2c>
      d0:	c0 98       	cbi	0x18, 0	; 24
      d2:	0e 94 4d 00 	call	0x9a	; 0x9a <HC595Pulse>
	
	if(a & 128)
      d6:	8e 2d       	mov	r24, r14
      d8:	88 0f       	add	r24, r24
	pinChange(D7,1);
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	e8 2e       	mov	r14, r24
      de:	39 c0       	rjmp	.+114    	; 0x152 <HC595Write+0xac>
      e0:	c0 31       	cpi	r28, 0x10	; 16
      e2:	d1 05       	cpc	r29, r1
      e4:	50 f4       	brcc	.+20     	; 0xfa <HC595Write+0x54>
      e6:	00 23       	and	r16, r16
	else
	pinChange(D7,0);
      e8:	14 f4       	brge	.+4      	; 0xee <HC595Write+0x48>
      ea:	c0 9a       	sbi	0x18, 0	; 24
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <HC595Write+0x4a>
      ee:	c0 98       	cbi	0x18, 0	; 24
      f0:	0e 94 4d 00 	call	0x9a	; 0x9a <HC595Pulse>
}
      f4:	00 0f       	add	r16, r16
      f6:	01 60       	ori	r16, 0x01	; 1
			  //MSB is 0 so output high
			  HC595DataLow();
		  }

		  HC595Pulse();
		  red2=red2<<1|0x01;
      f8:	2c c0       	rjmp	.+88     	; 0x152 <HC595Write+0xac>
	  }
	  else if(i<24){
      fa:	c8 31       	cpi	r28, 0x18	; 24
      fc:	d1 05       	cpc	r29, r1
      fe:	48 f4       	brcc	.+18     	; 0x112 <HC595Write+0x6c>
		  if(row2 & 0x80){
     100:	11 23       	and	r17, r17
     102:	14 f4       	brge	.+4      	; 0x108 <HC595Write+0x62>
			  //MSB is 1 so output high
			  HC595DataHigh();
     104:	c0 9a       	sbi	0x18, 0	; 24
     106:	01 c0       	rjmp	.+2      	; 0x10a <HC595Write+0x64>
			  }else{
			  //MSB is 0 so output high
			  HC595DataLow();
     108:	c0 98       	cbi	0x18, 0	; 24
		  }

		  HC595Pulse();
     10a:	0e 94 4d 00 	call	0x9a	; 0x9a <HC595Pulse>
		  row2=row2<<1;
     10e:	11 0f       	add	r17, r17
     110:	20 c0       	rjmp	.+64     	; 0x152 <HC595Write+0xac>
	  }
	  else if(i<32){
     112:	c0 32       	cpi	r28, 0x20	; 32
     114:	d1 05       	cpc	r29, r1
     116:	48 f4       	brcc	.+18     	; 0x12a <HC595Write+0x84>
		  if(grn1 & 0x80){
     118:	ff 20       	and	r15, r15
     11a:	14 f4       	brge	.+4      	; 0x120 <HC595Write+0x7a>
			  //MSB is 1 so output high
			  HC595DataHigh();
     11c:	c0 9a       	sbi	0x18, 0	; 24
     11e:	01 c0       	rjmp	.+2      	; 0x122 <HC595Write+0x7c>
			  }else{
			  //MSB is 0 so output high
			  HC595DataLow();
     120:	c0 98       	cbi	0x18, 0	; 24
		  }

		  HC595Pulse();
     122:	0e 94 4d 00 	call	0x9a	; 0x9a <HC595Pulse>
		  grn1=grn1<<1;
     126:	ff 0c       	add	r15, r15
     128:	14 c0       	rjmp	.+40     	; 0x152 <HC595Write+0xac>
	  }
	  else if(i<40){
     12a:	c8 32       	cpi	r28, 0x28	; 40
     12c:	d1 05       	cpc	r29, r1
     12e:	48 f4       	brcc	.+18     	; 0x142 <HC595Write+0x9c>
		  if(red1 & 0x80){
     130:	dd 20       	and	r13, r13
     132:	14 f4       	brge	.+4      	; 0x138 <HC595Write+0x92>
			  //MSB is 1 so output high
			  HC595DataHigh();
     134:	c0 9a       	sbi	0x18, 0	; 24
     136:	01 c0       	rjmp	.+2      	; 0x13a <HC595Write+0x94>
			  }else{
			  //MSB is 0 so output high
			  HC595DataLow();
     138:	c0 98       	cbi	0x18, 0	; 24
		  }

		  HC595Pulse();
     13a:	0e 94 4d 00 	call	0x9a	; 0x9a <HC595Pulse>
		  red1=red1<<1;
     13e:	dd 0c       	add	r13, r13
     140:	08 c0       	rjmp	.+16     	; 0x152 <HC595Write+0xac>
	  }
	  else{
		  if(row1 & 0x80){
     142:	cc 20       	and	r12, r12
     144:	14 f4       	brge	.+4      	; 0x14a <HC595Write+0xa4>
			  //MSB is 1 so output high
			  HC595DataHigh();
     146:	c0 9a       	sbi	0x18, 0	; 24
     148:	01 c0       	rjmp	.+2      	; 0x14c <HC595Write+0xa6>
			  }else{
			  //MSB is 0 so output high
			  HC595DataLow();
     14a:	c0 98       	cbi	0x18, 0	; 24
		  }

		  HC595Pulse();
     14c:	0e 94 4d 00 	call	0x9a	; 0x9a <HC595Pulse>
		  row1=row1<<1;
     150:	cc 0c       	add	r12, r12
void HC595Write(uint8_t row1,uint8_t red1,uint8_t grn1,uint8_t row2,uint8_t red2,uint8_t grn2)
{
   //Send each 8 bits serially

   //Order is MSB first
   for(uint16_t i=0;i<48;i++)
     152:	21 96       	adiw	r28, 0x01	; 1
     154:	c0 33       	cpi	r28, 0x30	; 48
     156:	d1 05       	cpc	r29, r1
     158:	09 f0       	breq	.+2      	; 0x15c <HC595Write+0xb6>
     15a:	b3 cf       	rjmp	.-154    	; 0xc2 <HC595Write+0x1c>

   }

   //Now all 8 bits have been transferred to shift register
   //Move them to output latch at one
   HC595Latch();
     15c:	0e 94 50 00 	call	0xa0	; 0xa0 <HC595Latch>
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	08 95       	ret

00000172 <init_score>:
int ball_X=4,ball_Y=9,dir=1;
uint8_t ball_row1=0b00000000, ball_grn1=0b11111111, ball_red1=0b11101111;
uint8_t ball_row2=0b00000001, ball_grn2=0b11111111, ball_red2=0b11101111;

void init_score(){
	pl1_score=0;pl2_score=0;
     172:	10 92 22 01 	sts	0x0122, r1
     176:	10 92 21 01 	sts	0x0121, r1
     17a:	10 92 20 01 	sts	0x0120, r1
     17e:	10 92 1f 01 	sts	0x011F, r1
     182:	08 95       	ret

00000184 <init_Ball>:
}

void init_Ball(){
	ball_X=4; ball_Y=9; dir=1;
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 6a 00 	sts	0x006A, r25
     18c:	80 93 69 00 	sts	0x0069, r24
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	90 93 68 00 	sts	0x0068, r25
     198:	80 93 67 00 	sts	0x0067, r24
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	90 93 66 00 	sts	0x0066, r25
     1a4:	80 93 65 00 	sts	0x0065, r24
	ball_row1=0b00000000; ball_grn1=0b11111111; ball_red1=0b11101111;
     1a8:	10 92 1c 01 	sts	0x011C, r1
     1ac:	9f ef       	ldi	r25, 0xFF	; 255
     1ae:	90 93 64 00 	sts	0x0064, r25
     1b2:	8f ee       	ldi	r24, 0xEF	; 239
     1b4:	80 93 63 00 	sts	0x0063, r24
	ball_row2=0b00000001; ball_grn2=0b11111111; ball_red2=0b11101111;
     1b8:	21 e0       	ldi	r18, 0x01	; 1
     1ba:	20 93 62 00 	sts	0x0062, r18
     1be:	90 93 61 00 	sts	0x0061, r25
     1c2:	80 93 60 00 	sts	0x0060, r24
     1c6:	08 95       	ret

000001c8 <init_Bar>:
}

void init_Bar(){
	bar2_X=2; bar2_Y=16;
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	90 93 76 00 	sts	0x0076, r25
     1d0:	80 93 75 00 	sts	0x0075, r24
     1d4:	20 e1       	ldi	r18, 0x10	; 16
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	30 93 74 00 	sts	0x0074, r19
     1dc:	20 93 73 00 	sts	0x0073, r18
	bar1_X=2; bar1_Y=0;
     1e0:	90 93 72 00 	sts	0x0072, r25
     1e4:	80 93 71 00 	sts	0x0071, r24
     1e8:	10 92 1e 01 	sts	0x011E, r1
     1ec:	10 92 1d 01 	sts	0x011D, r1

	row1=0b00000001; grn1=0b11000011; red1=0b11111111;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 70 00 	sts	0x0070, r24
     1f6:	93 ec       	ldi	r25, 0xC3	; 195
     1f8:	90 93 6f 00 	sts	0x006F, r25
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	80 93 6e 00 	sts	0x006E, r24
	row2=0b10000000; grn2=0b11000011; red2=0b11111111;
     202:	20 e8       	ldi	r18, 0x80	; 128
     204:	20 93 6d 00 	sts	0x006D, r18
     208:	90 93 6c 00 	sts	0x006C, r25
     20c:	80 93 6b 00 	sts	0x006B, r24
     210:	08 95       	ret

00000212 <drawAll>:
	}
	check();
}

void drawAll()
{
     212:	ef 92       	push	r14
     214:	0f 93       	push	r16

		HC595Write(row1,red1,grn1,row2,red2,grn2);
     216:	e0 90 6c 00 	lds	r14, 0x006C
     21a:	00 91 6b 00 	lds	r16, 0x006B
     21e:	20 91 6d 00 	lds	r18, 0x006D
     222:	40 91 6f 00 	lds	r20, 0x006F
     226:	60 91 6e 00 	lds	r22, 0x006E
     22a:	80 91 70 00 	lds	r24, 0x0070
     22e:	0e 94 53 00 	call	0xa6	; 0xa6 <HC595Write>
		HC595Write(ball_row1,ball_red1,ball_grn1,ball_row2,ball_red2,ball_grn2);
     232:	e0 90 61 00 	lds	r14, 0x0061
     236:	00 91 60 00 	lds	r16, 0x0060
     23a:	20 91 62 00 	lds	r18, 0x0062
     23e:	40 91 64 00 	lds	r20, 0x0064
     242:	60 91 63 00 	lds	r22, 0x0063
     246:	80 91 1c 01 	lds	r24, 0x011C
     24a:	0e 94 53 00 	call	0xa6	; 0xa6 <HC595Write>
	//	_delay_ms(100);
}
     24e:	0f 91       	pop	r16
     250:	ef 90       	pop	r14
     252:	08 95       	ret

00000254 <goUp2>:

void goUp2()
{
	if(bar2_Y>9)
     254:	80 91 73 00 	lds	r24, 0x0073
     258:	90 91 74 00 	lds	r25, 0x0074
     25c:	8a 30       	cpi	r24, 0x0A	; 10
     25e:	91 05       	cpc	r25, r1
     260:	54 f0       	brlt	.+20     	; 0x276 <goUp2+0x22>
	{
		row2>>=1;
     262:	20 91 6d 00 	lds	r18, 0x006D
     266:	26 95       	lsr	r18
     268:	20 93 6d 00 	sts	0x006D, r18
		bar2_Y--;
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	90 93 74 00 	sts	0x0074, r25
     272:	80 93 73 00 	sts	0x0073, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     276:	82 ed       	ldi	r24, 0xD2	; 210
     278:	99 e0       	ldi	r25, 0x09	; 9
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <goUp2+0x26>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <goUp2+0x2c>
     280:	00 00       	nop
     282:	08 95       	ret

00000284 <goDown2>:
	_delay_ms(10);
}

void goDown2()
{
	if(bar2_Y<16)
     284:	80 91 73 00 	lds	r24, 0x0073
     288:	90 91 74 00 	lds	r25, 0x0074
     28c:	80 31       	cpi	r24, 0x10	; 16
     28e:	91 05       	cpc	r25, r1
     290:	54 f4       	brge	.+20     	; 0x2a6 <goDown2+0x22>
	{
		row2<<=1;
     292:	20 91 6d 00 	lds	r18, 0x006D
     296:	22 0f       	add	r18, r18
     298:	20 93 6d 00 	sts	0x006D, r18
		bar2_Y++;
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 74 00 	sts	0x0074, r25
     2a2:	80 93 73 00 	sts	0x0073, r24
     2a6:	82 ed       	ldi	r24, 0xD2	; 210
     2a8:	99 e0       	ldi	r25, 0x09	; 9
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <goDown2+0x26>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <goDown2+0x2c>
     2b0:	00 00       	nop
     2b2:	08 95       	ret

000002b4 <goLeft2>:
	_delay_ms(10);
}

void goLeft2()
{
	if(bar2_X<4)
     2b4:	80 91 75 00 	lds	r24, 0x0075
     2b8:	90 91 76 00 	lds	r25, 0x0076
     2bc:	84 30       	cpi	r24, 0x04	; 4
     2be:	91 05       	cpc	r25, r1
     2c0:	5c f4       	brge	.+22     	; 0x2d8 <goLeft2+0x24>
	{
		grn2=(grn2>>1)|0x80;
     2c2:	20 91 6c 00 	lds	r18, 0x006C
     2c6:	26 95       	lsr	r18
     2c8:	20 68       	ori	r18, 0x80	; 128
     2ca:	20 93 6c 00 	sts	0x006C, r18
		
		bar2_X++;
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	90 93 76 00 	sts	0x0076, r25
     2d4:	80 93 75 00 	sts	0x0075, r24
     2d8:	82 ed       	ldi	r24, 0xD2	; 210
     2da:	99 e0       	ldi	r25, 0x09	; 9
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <goLeft2+0x28>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <goLeft2+0x2e>
     2e2:	00 00       	nop
     2e4:	08 95       	ret

000002e6 <goRight2>:
	_delay_ms(10);
}

void goRight2()
{
	if(bar2_X>0)
     2e6:	80 91 75 00 	lds	r24, 0x0075
     2ea:	90 91 76 00 	lds	r25, 0x0076
     2ee:	18 16       	cp	r1, r24
     2f0:	19 06       	cpc	r1, r25
     2f2:	5c f4       	brge	.+22     	; 0x30a <goRight2+0x24>
	{
		grn2=(grn2<<1)|0x01;
     2f4:	20 91 6c 00 	lds	r18, 0x006C
     2f8:	22 0f       	add	r18, r18
     2fa:	21 60       	ori	r18, 0x01	; 1
     2fc:	20 93 6c 00 	sts	0x006C, r18
		bar2_X--;
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	90 93 76 00 	sts	0x0076, r25
     306:	80 93 75 00 	sts	0x0075, r24
     30a:	82 ed       	ldi	r24, 0xD2	; 210
     30c:	99 e0       	ldi	r25, 0x09	; 9
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <goRight2+0x28>
     312:	00 c0       	rjmp	.+0      	; 0x314 <goRight2+0x2e>
     314:	00 00       	nop
     316:	08 95       	ret

00000318 <goUp1>:
	_delay_ms(10);
}

void goUp1()
{
	if(bar1_Y<7)
     318:	80 91 1d 01 	lds	r24, 0x011D
     31c:	90 91 1e 01 	lds	r25, 0x011E
     320:	87 30       	cpi	r24, 0x07	; 7
     322:	91 05       	cpc	r25, r1
     324:	54 f4       	brge	.+20     	; 0x33a <goUp1+0x22>
	{
		row1<<=1;
     326:	20 91 70 00 	lds	r18, 0x0070
     32a:	22 0f       	add	r18, r18
     32c:	20 93 70 00 	sts	0x0070, r18
		bar1_Y++;
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	90 93 1e 01 	sts	0x011E, r25
     336:	80 93 1d 01 	sts	0x011D, r24
     33a:	82 ed       	ldi	r24, 0xD2	; 210
     33c:	99 e0       	ldi	r25, 0x09	; 9
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <goUp1+0x26>
     342:	00 c0       	rjmp	.+0      	; 0x344 <goUp1+0x2c>
     344:	00 00       	nop
     346:	08 95       	ret

00000348 <goDown1>:
	_delay_ms(10);
}

void goDown1()
{
	if(bar1_Y>0)
     348:	80 91 1d 01 	lds	r24, 0x011D
     34c:	90 91 1e 01 	lds	r25, 0x011E
     350:	18 16       	cp	r1, r24
     352:	19 06       	cpc	r1, r25
     354:	54 f4       	brge	.+20     	; 0x36a <goDown1+0x22>
	{
		row1>>=1;
     356:	20 91 70 00 	lds	r18, 0x0070
     35a:	26 95       	lsr	r18
     35c:	20 93 70 00 	sts	0x0070, r18
		bar1_Y--;
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	90 93 1e 01 	sts	0x011E, r25
     366:	80 93 1d 01 	sts	0x011D, r24
     36a:	82 ed       	ldi	r24, 0xD2	; 210
     36c:	99 e0       	ldi	r25, 0x09	; 9
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <goDown1+0x26>
     372:	00 c0       	rjmp	.+0      	; 0x374 <goDown1+0x2c>
     374:	00 00       	nop
     376:	08 95       	ret

00000378 <goLeft1>:
	_delay_ms(10);
}

void goLeft1()
{
	if(bar1_X>0)
     378:	80 91 71 00 	lds	r24, 0x0071
     37c:	90 91 72 00 	lds	r25, 0x0072
     380:	18 16       	cp	r1, r24
     382:	19 06       	cpc	r1, r25
     384:	5c f4       	brge	.+22     	; 0x39c <goLeft1+0x24>
	{
		grn1=(grn1<<1)|0x01;
     386:	20 91 6f 00 	lds	r18, 0x006F
     38a:	22 0f       	add	r18, r18
     38c:	21 60       	ori	r18, 0x01	; 1
     38e:	20 93 6f 00 	sts	0x006F, r18
		bar1_X--;
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	90 93 72 00 	sts	0x0072, r25
     398:	80 93 71 00 	sts	0x0071, r24
     39c:	82 ed       	ldi	r24, 0xD2	; 210
     39e:	99 e0       	ldi	r25, 0x09	; 9
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <goLeft1+0x28>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <goLeft1+0x2e>
     3a6:	00 00       	nop
     3a8:	08 95       	ret

000003aa <goRight1>:
	_delay_ms(10);
}

void goRight1()
{
	if(bar1_X<4)
     3aa:	80 91 71 00 	lds	r24, 0x0071
     3ae:	90 91 72 00 	lds	r25, 0x0072
     3b2:	84 30       	cpi	r24, 0x04	; 4
     3b4:	91 05       	cpc	r25, r1
     3b6:	5c f4       	brge	.+22     	; 0x3ce <goRight1+0x24>
	{
		grn1=(grn1>>1)|0x80;
     3b8:	20 91 6f 00 	lds	r18, 0x006F
     3bc:	26 95       	lsr	r18
     3be:	20 68       	ori	r18, 0x80	; 128
     3c0:	20 93 6f 00 	sts	0x006F, r18
		
		bar1_X++;
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	90 93 72 00 	sts	0x0072, r25
     3ca:	80 93 71 00 	sts	0x0071, r24
     3ce:	82 ed       	ldi	r24, 0xD2	; 210
     3d0:	99 e0       	ldi	r25, 0x09	; 9
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <goRight1+0x28>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <goRight1+0x2e>
     3d8:	00 00       	nop
     3da:	08 95       	ret

000003dc <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
     3dc:	67 2b       	or	r22, r23
     3de:	09 f0       	breq	.+2      	; 0x3e2 <pinChange+0x6>
     3e0:	9f c0       	rjmp	.+318    	; 0x520 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	11 f4       	brne	.+4      	; 0x3ea <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
     3e6:	d8 98       	cbi	0x1b, 0	; 27
     3e8:	08 95       	ret
		else if(a == eS_PORTA1)
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	91 05       	cpc	r25, r1
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
     3f0:	d9 98       	cbi	0x1b, 1	; 27
     3f2:	08 95       	ret
		else if(a == eS_PORTA2)
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	91 05       	cpc	r25, r1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
     3fa:	da 98       	cbi	0x1b, 2	; 27
     3fc:	08 95       	ret
		else if(a == eS_PORTA3)
     3fe:	83 30       	cpi	r24, 0x03	; 3
     400:	91 05       	cpc	r25, r1
     402:	11 f4       	brne	.+4      	; 0x408 <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
     404:	db 98       	cbi	0x1b, 3	; 27
     406:	08 95       	ret
		else if(a == eS_PORTA4)
     408:	84 30       	cpi	r24, 0x04	; 4
     40a:	91 05       	cpc	r25, r1
     40c:	11 f4       	brne	.+4      	; 0x412 <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
     40e:	dc 98       	cbi	0x1b, 4	; 27
     410:	08 95       	ret
		else if(a == eS_PORTA5)
     412:	85 30       	cpi	r24, 0x05	; 5
     414:	91 05       	cpc	r25, r1
     416:	11 f4       	brne	.+4      	; 0x41c <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
     418:	dd 98       	cbi	0x1b, 5	; 27
     41a:	08 95       	ret
		else if(a == eS_PORTA6)
     41c:	86 30       	cpi	r24, 0x06	; 6
     41e:	91 05       	cpc	r25, r1
     420:	11 f4       	brne	.+4      	; 0x426 <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
     422:	de 98       	cbi	0x1b, 6	; 27
     424:	08 95       	ret
		else if(a == eS_PORTA7)
     426:	87 30       	cpi	r24, 0x07	; 7
     428:	91 05       	cpc	r25, r1
     42a:	11 f4       	brne	.+4      	; 0x430 <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
     42c:	df 98       	cbi	0x1b, 7	; 27
     42e:	08 95       	ret
		else if(a == eS_PORTB0)
     430:	8a 30       	cpi	r24, 0x0A	; 10
     432:	91 05       	cpc	r25, r1
     434:	11 f4       	brne	.+4      	; 0x43a <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
     436:	c0 98       	cbi	0x18, 0	; 24
     438:	08 95       	ret
		else if(a == eS_PORTB1)
     43a:	8b 30       	cpi	r24, 0x0B	; 11
     43c:	91 05       	cpc	r25, r1
     43e:	11 f4       	brne	.+4      	; 0x444 <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
     440:	c1 98       	cbi	0x18, 1	; 24
     442:	08 95       	ret
		else if(a == eS_PORTB2)
     444:	8c 30       	cpi	r24, 0x0C	; 12
     446:	91 05       	cpc	r25, r1
     448:	11 f4       	brne	.+4      	; 0x44e <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
     44a:	c2 98       	cbi	0x18, 2	; 24
     44c:	08 95       	ret
		else if(a == eS_PORTB3)
     44e:	8d 30       	cpi	r24, 0x0D	; 13
     450:	91 05       	cpc	r25, r1
     452:	11 f4       	brne	.+4      	; 0x458 <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
     454:	c3 98       	cbi	0x18, 3	; 24
     456:	08 95       	ret
		else if(a == eS_PORTB4)
     458:	8e 30       	cpi	r24, 0x0E	; 14
     45a:	91 05       	cpc	r25, r1
     45c:	11 f4       	brne	.+4      	; 0x462 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
     45e:	c4 98       	cbi	0x18, 4	; 24
     460:	08 95       	ret
		else if(a == eS_PORTB5)
     462:	8f 30       	cpi	r24, 0x0F	; 15
     464:	91 05       	cpc	r25, r1
     466:	11 f4       	brne	.+4      	; 0x46c <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
     468:	c5 98       	cbi	0x18, 5	; 24
     46a:	08 95       	ret
		else if(a == eS_PORTB6)
     46c:	80 31       	cpi	r24, 0x10	; 16
     46e:	91 05       	cpc	r25, r1
     470:	11 f4       	brne	.+4      	; 0x476 <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
     472:	c6 98       	cbi	0x18, 6	; 24
     474:	08 95       	ret
		else if(a == eS_PORTB7)
     476:	81 31       	cpi	r24, 0x11	; 17
     478:	91 05       	cpc	r25, r1
     47a:	11 f4       	brne	.+4      	; 0x480 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
     47c:	c7 98       	cbi	0x18, 7	; 24
     47e:	08 95       	ret
		else if(a == eS_PORTC0)
     480:	84 31       	cpi	r24, 0x14	; 20
     482:	91 05       	cpc	r25, r1
     484:	11 f4       	brne	.+4      	; 0x48a <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
     486:	a8 98       	cbi	0x15, 0	; 21
     488:	08 95       	ret
		else if(a == eS_PORTC1)
     48a:	85 31       	cpi	r24, 0x15	; 21
     48c:	91 05       	cpc	r25, r1
     48e:	11 f4       	brne	.+4      	; 0x494 <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
     490:	a9 98       	cbi	0x15, 1	; 21
     492:	08 95       	ret
		else if(a == eS_PORTC2)
     494:	86 31       	cpi	r24, 0x16	; 22
     496:	91 05       	cpc	r25, r1
     498:	11 f4       	brne	.+4      	; 0x49e <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
     49a:	aa 98       	cbi	0x15, 2	; 21
     49c:	08 95       	ret
		else if(a == eS_PORTC3)
     49e:	87 31       	cpi	r24, 0x17	; 23
     4a0:	91 05       	cpc	r25, r1
     4a2:	11 f4       	brne	.+4      	; 0x4a8 <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
     4a4:	ab 98       	cbi	0x15, 3	; 21
     4a6:	08 95       	ret
		else if(a == eS_PORTC4)
     4a8:	88 31       	cpi	r24, 0x18	; 24
     4aa:	91 05       	cpc	r25, r1
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
     4ae:	ac 98       	cbi	0x15, 4	; 21
     4b0:	08 95       	ret
		else if(a == eS_PORTC5)
     4b2:	89 31       	cpi	r24, 0x19	; 25
     4b4:	91 05       	cpc	r25, r1
     4b6:	11 f4       	brne	.+4      	; 0x4bc <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
     4b8:	ad 98       	cbi	0x15, 5	; 21
     4ba:	08 95       	ret
        else if(a == eS_PORTC6)
     4bc:	8a 31       	cpi	r24, 0x1A	; 26
     4be:	91 05       	cpc	r25, r1
     4c0:	11 f4       	brne	.+4      	; 0x4c6 <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
     4c2:	ae 98       	cbi	0x15, 6	; 21
     4c4:	08 95       	ret
		else if(a == eS_PORTC7)
     4c6:	8b 31       	cpi	r24, 0x1B	; 27
     4c8:	91 05       	cpc	r25, r1
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
     4cc:	af 98       	cbi	0x15, 7	; 21
     4ce:	08 95       	ret
		else if(a == eS_PORTD0)
     4d0:	8e 31       	cpi	r24, 0x1E	; 30
     4d2:	91 05       	cpc	r25, r1
     4d4:	11 f4       	brne	.+4      	; 0x4da <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
     4d6:	90 98       	cbi	0x12, 0	; 18
     4d8:	08 95       	ret
		else if(a == eS_PORTD1)
     4da:	8f 31       	cpi	r24, 0x1F	; 31
     4dc:	91 05       	cpc	r25, r1
     4de:	11 f4       	brne	.+4      	; 0x4e4 <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
     4e0:	91 98       	cbi	0x12, 1	; 18
     4e2:	08 95       	ret
		else if(a == eS_PORTD2)
     4e4:	80 32       	cpi	r24, 0x20	; 32
     4e6:	91 05       	cpc	r25, r1
     4e8:	11 f4       	brne	.+4      	; 0x4ee <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
     4ea:	92 98       	cbi	0x12, 2	; 18
     4ec:	08 95       	ret
		else if(a == eS_PORTD3)
     4ee:	81 32       	cpi	r24, 0x21	; 33
     4f0:	91 05       	cpc	r25, r1
     4f2:	11 f4       	brne	.+4      	; 0x4f8 <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
     4f4:	93 98       	cbi	0x12, 3	; 18
     4f6:	08 95       	ret
		else if(a == eS_PORTD4)
     4f8:	82 32       	cpi	r24, 0x22	; 34
     4fa:	91 05       	cpc	r25, r1
     4fc:	11 f4       	brne	.+4      	; 0x502 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
     4fe:	94 98       	cbi	0x12, 4	; 18
     500:	08 95       	ret
		else if(a == eS_PORTD5)
     502:	83 32       	cpi	r24, 0x23	; 35
     504:	91 05       	cpc	r25, r1
     506:	11 f4       	brne	.+4      	; 0x50c <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
     508:	95 98       	cbi	0x12, 5	; 18
     50a:	08 95       	ret
		else if(a == eS_PORTD6)
     50c:	84 32       	cpi	r24, 0x24	; 36
     50e:	91 05       	cpc	r25, r1
     510:	11 f4       	brne	.+4      	; 0x516 <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
     512:	96 98       	cbi	0x12, 6	; 18
     514:	08 95       	ret
		else if(a == eS_PORTD7)
     516:	85 97       	sbiw	r24, 0x25	; 37
     518:	09 f0       	breq	.+2      	; 0x51c <pinChange+0x140>
     51a:	9f c0       	rjmp	.+318    	; 0x65a <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
     51c:	97 98       	cbi	0x12, 7	; 18
     51e:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	11 f4       	brne	.+4      	; 0x528 <pinChange+0x14c>
		  PORTA |= (1<<PA0);
     524:	d8 9a       	sbi	0x1b, 0	; 27
     526:	08 95       	ret
		else if(a == eS_PORTA1)
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	91 05       	cpc	r25, r1
     52c:	11 f4       	brne	.+4      	; 0x532 <pinChange+0x156>
		  PORTA |= (1<<PA1);
     52e:	d9 9a       	sbi	0x1b, 1	; 27
     530:	08 95       	ret
		else if(a == eS_PORTA2)
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	91 05       	cpc	r25, r1
     536:	11 f4       	brne	.+4      	; 0x53c <pinChange+0x160>
		  PORTA |= (1<<PA2);
     538:	da 9a       	sbi	0x1b, 2	; 27
     53a:	08 95       	ret
		else if(a == eS_PORTA3)
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	91 05       	cpc	r25, r1
     540:	11 f4       	brne	.+4      	; 0x546 <pinChange+0x16a>
		  PORTA |= (1<<PA3);
     542:	db 9a       	sbi	0x1b, 3	; 27
     544:	08 95       	ret
		else if(a == eS_PORTA4)
     546:	84 30       	cpi	r24, 0x04	; 4
     548:	91 05       	cpc	r25, r1
     54a:	11 f4       	brne	.+4      	; 0x550 <pinChange+0x174>
		  PORTA |= (1<<PA4);
     54c:	dc 9a       	sbi	0x1b, 4	; 27
     54e:	08 95       	ret
		else if(a == eS_PORTA5)
     550:	85 30       	cpi	r24, 0x05	; 5
     552:	91 05       	cpc	r25, r1
     554:	11 f4       	brne	.+4      	; 0x55a <pinChange+0x17e>
		  PORTA |= (1<<PA5);
     556:	dd 9a       	sbi	0x1b, 5	; 27
     558:	08 95       	ret
		else if(a == eS_PORTA6)
     55a:	86 30       	cpi	r24, 0x06	; 6
     55c:	91 05       	cpc	r25, r1
     55e:	11 f4       	brne	.+4      	; 0x564 <pinChange+0x188>
		  PORTA |= (1<<PA6);
     560:	de 9a       	sbi	0x1b, 6	; 27
     562:	08 95       	ret
		else if(a == eS_PORTA7)
     564:	87 30       	cpi	r24, 0x07	; 7
     566:	91 05       	cpc	r25, r1
     568:	11 f4       	brne	.+4      	; 0x56e <pinChange+0x192>
		  PORTA |= (1<<PA7);
     56a:	df 9a       	sbi	0x1b, 7	; 27
     56c:	08 95       	ret
		else if(a == eS_PORTB0)
     56e:	8a 30       	cpi	r24, 0x0A	; 10
     570:	91 05       	cpc	r25, r1
     572:	11 f4       	brne	.+4      	; 0x578 <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
     574:	c0 9a       	sbi	0x18, 0	; 24
     576:	08 95       	ret
		else if(a == eS_PORTB1)
     578:	8b 30       	cpi	r24, 0x0B	; 11
     57a:	91 05       	cpc	r25, r1
     57c:	11 f4       	brne	.+4      	; 0x582 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
     57e:	c1 9a       	sbi	0x18, 1	; 24
     580:	08 95       	ret
		else if(a == eS_PORTB2)
     582:	8c 30       	cpi	r24, 0x0C	; 12
     584:	91 05       	cpc	r25, r1
     586:	11 f4       	brne	.+4      	; 0x58c <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
     588:	c2 9a       	sbi	0x18, 2	; 24
     58a:	08 95       	ret
		else if(a == eS_PORTB3)
     58c:	8d 30       	cpi	r24, 0x0D	; 13
     58e:	91 05       	cpc	r25, r1
     590:	11 f4       	brne	.+4      	; 0x596 <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
     592:	c3 9a       	sbi	0x18, 3	; 24
     594:	08 95       	ret
		else if(a == eS_PORTB4)
     596:	8e 30       	cpi	r24, 0x0E	; 14
     598:	91 05       	cpc	r25, r1
     59a:	11 f4       	brne	.+4      	; 0x5a0 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
     59c:	c4 9a       	sbi	0x18, 4	; 24
     59e:	08 95       	ret
		else if(a == eS_PORTB5)
     5a0:	8f 30       	cpi	r24, 0x0F	; 15
     5a2:	91 05       	cpc	r25, r1
     5a4:	11 f4       	brne	.+4      	; 0x5aa <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
     5a6:	c5 9a       	sbi	0x18, 5	; 24
     5a8:	08 95       	ret
		else if(a == eS_PORTB6)
     5aa:	80 31       	cpi	r24, 0x10	; 16
     5ac:	91 05       	cpc	r25, r1
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
     5b0:	c6 9a       	sbi	0x18, 6	; 24
     5b2:	08 95       	ret
		else if(a == eS_PORTB7)
     5b4:	81 31       	cpi	r24, 0x11	; 17
     5b6:	91 05       	cpc	r25, r1
     5b8:	11 f4       	brne	.+4      	; 0x5be <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
     5ba:	c7 9a       	sbi	0x18, 7	; 24
     5bc:	08 95       	ret
		else if(a == eS_PORTC0)
     5be:	84 31       	cpi	r24, 0x14	; 20
     5c0:	91 05       	cpc	r25, r1
     5c2:	11 f4       	brne	.+4      	; 0x5c8 <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
     5c4:	a8 9a       	sbi	0x15, 0	; 21
     5c6:	08 95       	ret
		else if(a == eS_PORTC1)
     5c8:	85 31       	cpi	r24, 0x15	; 21
     5ca:	91 05       	cpc	r25, r1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
     5ce:	a9 9a       	sbi	0x15, 1	; 21
     5d0:	08 95       	ret
		else if(a == eS_PORTC2)
     5d2:	86 31       	cpi	r24, 0x16	; 22
     5d4:	91 05       	cpc	r25, r1
     5d6:	11 f4       	brne	.+4      	; 0x5dc <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
     5d8:	aa 9a       	sbi	0x15, 2	; 21
     5da:	08 95       	ret
		else if(a == eS_PORTC3)
     5dc:	87 31       	cpi	r24, 0x17	; 23
     5de:	91 05       	cpc	r25, r1
     5e0:	11 f4       	brne	.+4      	; 0x5e6 <pinChange+0x20a>
		  PORTC |= (1<<PC3);
     5e2:	ab 9a       	sbi	0x15, 3	; 21
     5e4:	08 95       	ret
		else if(a == eS_PORTC4)
     5e6:	88 31       	cpi	r24, 0x18	; 24
     5e8:	91 05       	cpc	r25, r1
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <pinChange+0x214>
		  PORTC |= (1<<PC4);
     5ec:	ac 9a       	sbi	0x15, 4	; 21
     5ee:	08 95       	ret
		else if(a == eS_PORTC5)
     5f0:	89 31       	cpi	r24, 0x19	; 25
     5f2:	91 05       	cpc	r25, r1
     5f4:	11 f4       	brne	.+4      	; 0x5fa <pinChange+0x21e>
		  PORTC |= (1<<PC5);
     5f6:	ad 9a       	sbi	0x15, 5	; 21
     5f8:	08 95       	ret
		else if(a == eS_PORTC6)
     5fa:	8a 31       	cpi	r24, 0x1A	; 26
     5fc:	91 05       	cpc	r25, r1
     5fe:	11 f4       	brne	.+4      	; 0x604 <pinChange+0x228>
		  PORTC |= (1<<PC6);  
     600:	ae 9a       	sbi	0x15, 6	; 21
     602:	08 95       	ret
		else if(a == eS_PORTC7)
     604:	8b 31       	cpi	r24, 0x1B	; 27
     606:	91 05       	cpc	r25, r1
     608:	11 f4       	brne	.+4      	; 0x60e <pinChange+0x232>
		  PORTC |= (1<<PC7);
     60a:	af 9a       	sbi	0x15, 7	; 21
     60c:	08 95       	ret
		else if(a == eS_PORTD0)
     60e:	8e 31       	cpi	r24, 0x1E	; 30
     610:	91 05       	cpc	r25, r1
     612:	11 f4       	brne	.+4      	; 0x618 <pinChange+0x23c>
		  PORTD |= (1<<PD0);
     614:	90 9a       	sbi	0x12, 0	; 18
     616:	08 95       	ret
		else if(a == eS_PORTD1)
     618:	8f 31       	cpi	r24, 0x1F	; 31
     61a:	91 05       	cpc	r25, r1
     61c:	11 f4       	brne	.+4      	; 0x622 <pinChange+0x246>
		  PORTD |= (1<<PD1);
     61e:	91 9a       	sbi	0x12, 1	; 18
     620:	08 95       	ret
		else if(a == eS_PORTD2)
     622:	80 32       	cpi	r24, 0x20	; 32
     624:	91 05       	cpc	r25, r1
     626:	11 f4       	brne	.+4      	; 0x62c <pinChange+0x250>
		  PORTD |= (1<<PD2);
     628:	92 9a       	sbi	0x12, 2	; 18
     62a:	08 95       	ret
		else if(a == eS_PORTD3)
     62c:	81 32       	cpi	r24, 0x21	; 33
     62e:	91 05       	cpc	r25, r1
     630:	11 f4       	brne	.+4      	; 0x636 <pinChange+0x25a>
		  PORTD |= (1<<PD3);
     632:	93 9a       	sbi	0x12, 3	; 18
     634:	08 95       	ret
		else if(a == eS_PORTD4)
     636:	82 32       	cpi	r24, 0x22	; 34
     638:	91 05       	cpc	r25, r1
     63a:	11 f4       	brne	.+4      	; 0x640 <pinChange+0x264>
		  PORTD |= (1<<PD4);
     63c:	94 9a       	sbi	0x12, 4	; 18
     63e:	08 95       	ret
		else if(a == eS_PORTD5)
     640:	83 32       	cpi	r24, 0x23	; 35
     642:	91 05       	cpc	r25, r1
     644:	11 f4       	brne	.+4      	; 0x64a <pinChange+0x26e>
		  PORTD |= (1<<PD5);
     646:	95 9a       	sbi	0x12, 5	; 18
     648:	08 95       	ret
		else if(a == eS_PORTD6)
     64a:	84 32       	cpi	r24, 0x24	; 36
     64c:	91 05       	cpc	r25, r1
     64e:	11 f4       	brne	.+4      	; 0x654 <pinChange+0x278>
		  PORTD |= (1<<PD6);
     650:	96 9a       	sbi	0x12, 6	; 18
     652:	08 95       	ret
		else if(a == eS_PORTD7)
     654:	85 97       	sbiw	r24, 0x25	; 37
     656:	09 f4       	brne	.+2      	; 0x65a <pinChange+0x27e>
		  PORTD |= (1<<PD7);
     658:	97 9a       	sbi	0x12, 7	; 18
     65a:	08 95       	ret

0000065c <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     65c:	cf 93       	push	r28
     65e:	c8 2f       	mov	r28, r24
	if(a & 1)
     660:	80 ff       	sbrs	r24, 0
     662:	07 c0       	rjmp	.+14     	; 0x672 <Lcd4_Port+0x16>
	pinChange(D4,1);
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     670:	06 c0       	rjmp	.+12     	; 0x67e <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	83 e0       	ldi	r24, 0x03	; 3
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
	
	if(a & 2)
     67e:	c1 ff       	sbrs	r28, 1
     680:	07 c0       	rjmp	.+14     	; 0x690 <Lcd4_Port+0x34>
	pinChange(D5,1);
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     68e:	06 c0       	rjmp	.+12     	; 0x69c <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
	
	if(a & 4)
     69c:	c2 ff       	sbrs	r28, 2
     69e:	07 c0       	rjmp	.+14     	; 0x6ae <Lcd4_Port+0x52>
	pinChange(D6,1);
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     6ac:	06 c0       	rjmp	.+12     	; 0x6ba <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
	
	if(a & 8)
     6ba:	c3 ff       	sbrs	r28, 3
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <Lcd4_Port+0x70>
	pinChange(D7,1);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
}
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     6dc:	cf 93       	push	r28
     6de:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	85 e0       	ldi	r24, 0x05	; 5
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
	Lcd4_Port(a);
     6ec:	8c 2f       	mov	r24, r28
     6ee:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     6fe:	8b ef       	ldi	r24, 0xFB	; 251
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <Lcd4_Cmd+0x26>
     706:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     714:	8b ef       	ldi	r24, 0xFB	; 251
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <Lcd4_Cmd+0x3c>
     71c:	00 00       	nop
	_delay_ms(1);
}
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(1);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
     72e:	08 95       	ret

00000730 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     730:	cf 93       	push	r28
     732:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	59 f4       	brne	.+22     	; 0x74e <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
     738:	80 e8       	ldi	r24, 0x80	; 128
     73a:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     73c:	82 95       	swap	r24
     73e:	8f 70       	andi	r24, 0x0F	; 15
     740:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
		Lcd4_Cmd(y);
     744:	8c 2f       	mov	r24, r28
     746:	8f 70       	andi	r24, 0x0F	; 15
     748:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
     74c:	0c c0       	rjmp	.+24     	; 0x766 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	51 f4       	brne	.+20     	; 0x766 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
     752:	80 ec       	ldi	r24, 0xC0	; 192
     754:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     756:	82 95       	swap	r24
     758:	8f 70       	andi	r24, 0x0F	; 15
     75a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
		Lcd4_Cmd(y);
     75e:	8c 2f       	mov	r24, r28
     760:	8f 70       	andi	r24, 0x0F	; 15
     762:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	}
}
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd4_Port>
     770:	85 ea       	ldi	r24, 0xA5	; 165
     772:	93 e1       	ldi	r25, 0x13	; 19
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <Lcd4_Init+0xa>
     778:	00 c0       	rjmp	.+0      	; 0x77a <Lcd4_Init+0x10>
     77a:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
     782:	89 ee       	ldi	r24, 0xE9	; 233
     784:	94 e0       	ldi	r25, 0x04	; 4
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <Lcd4_Init+0x1c>
     78a:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
     792:	8e ec       	ldi	r24, 0xCE	; 206
     794:	9a e0       	ldi	r25, 0x0A	; 10
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <Lcd4_Init+0x2c>
     79a:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     7ae:	88 e0       	ldi	r24, 0x08	; 8
     7b0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     7ba:	8c e0       	ldi	r24, 0x0C	; 12
     7bc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     7c6:	86 e0       	ldi	r24, 0x06	; 6
     7c8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Cmd>
     7cc:	08 95       	ret

000007ce <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
     7ce:	cf 93       	push	r28
     7d0:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	85 e0       	ldi	r24, 0x05	; 5
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     7de:	8c 2f       	mov	r24, r28
     7e0:	82 95       	swap	r24
     7e2:	8f 70       	andi	r24, 0x0F	; 15
     7e4:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd4_Port>
	pinChange(EN,1);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     7f4:	8b ef       	ldi	r24, 0xFB	; 251
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <Lcd4_Write_Char+0x2a>
     7fc:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	84 e0       	ldi	r24, 0x04	; 4
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     80a:	8b ef       	ldi	r24, 0xFB	; 251
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <Lcd4_Write_Char+0x40>
     812:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     814:	8c 2f       	mov	r24, r28
     816:	8f 70       	andi	r24, 0x0F	; 15
     818:	0e 94 2e 03 	call	0x65c	; 0x65c <Lcd4_Port>
	pinChange(EN,1);
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     828:	8b ef       	ldi	r24, 0xFB	; 251
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <Lcd4_Write_Char+0x5e>
     830:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <pinChange>
     83e:	8b ef       	ldi	r24, 0xFB	; 251
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <Lcd4_Write_Char+0x74>
     846:	00 00       	nop
	_delay_ms(1);
}
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     852:	88 81       	ld	r24, Y
     854:	88 23       	and	r24, r24
     856:	31 f0       	breq	.+12     	; 0x864 <__stack+0x5>
     858:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     85a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     85e:	89 91       	ld	r24, Y+
     860:	81 11       	cpse	r24, r1
     862:	fb cf       	rjmp	.-10     	; 0x85a <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <setLCD>:
	row1=0b00000001; grn1=0b11000011; red1=0b11111111;
	row2=0b10000000; grn2=0b11000011; red2=0b11111111;
}

void setLCD(){
	Lcd4_Clear();
     86a:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
	Lcd4_Set_Cursor(2,0);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Game ");
     87a:	8b e7       	ldi	r24, 0x7B	; 123
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,6);
     882:	66 e0       	ldi	r22, 0x06	; 6
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String(" running.");
     88e:	81 e8       	ldi	r24, 0x81	; 129
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     896:	08 95       	ret

00000898 <check>:
}

void check(){
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
	if(ball_Y>=bar2_Y){
     89c:	20 91 67 00 	lds	r18, 0x0067
     8a0:	30 91 68 00 	lds	r19, 0x0068
     8a4:	80 91 73 00 	lds	r24, 0x0073
     8a8:	90 91 74 00 	lds	r25, 0x0074
     8ac:	28 17       	cp	r18, r24
     8ae:	39 07       	cpc	r19, r25
     8b0:	0c f4       	brge	.+2      	; 0x8b4 <check+0x1c>
     8b2:	55 c0       	rjmp	.+170    	; 0x95e <check+0xc6>
		if(ball_X>bar2_X&&ball_X<=bar2_X+4){
     8b4:	80 91 69 00 	lds	r24, 0x0069
     8b8:	90 91 6a 00 	lds	r25, 0x006A
     8bc:	20 91 75 00 	lds	r18, 0x0075
     8c0:	30 91 76 00 	lds	r19, 0x0076
     8c4:	28 17       	cp	r18, r24
     8c6:	39 07       	cpc	r19, r25
     8c8:	e4 f4       	brge	.+56     	; 0x902 <check+0x6a>
     8ca:	2c 5f       	subi	r18, 0xFC	; 252
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	28 17       	cp	r18, r24
     8d0:	39 07       	cpc	r19, r25
     8d2:	bc f0       	brlt	.+46     	; 0x902 <check+0x6a>
	//		ball_Y--;
	//		ball_row2=(ball_row2>>1);
			if(dir==3)dir=2;
     8d4:	80 91 65 00 	lds	r24, 0x0065
     8d8:	90 91 66 00 	lds	r25, 0x0066
     8dc:	83 30       	cpi	r24, 0x03	; 3
     8de:	91 05       	cpc	r25, r1
     8e0:	39 f4       	brne	.+14     	; 0x8f0 <check+0x58>
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 66 00 	sts	0x0066, r25
     8ea:	80 93 65 00 	sts	0x0065, r24
     8ee:	37 c0       	rjmp	.+110    	; 0x95e <check+0xc6>
			else if(dir==4)dir=1;
     8f0:	04 97       	sbiw	r24, 0x04	; 4
     8f2:	a9 f5       	brne	.+106    	; 0x95e <check+0xc6>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 66 00 	sts	0x0066, r25
     8fc:	80 93 65 00 	sts	0x0065, r24
     900:	2e c0       	rjmp	.+92     	; 0x95e <check+0xc6>
		}
		else
		{
			drawAll();
     902:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
			Lcd4_Clear();
     906:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
			Lcd4_Write_String("Player 1 wins !");
     916:	8b e8       	ldi	r24, 0x8B	; 139
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
			PORTD=0xff;
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	82 bb       	out	0x12, r24	; 18
     922:	c4 e6       	ldi	r28, 0x64	; 100
     924:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i=0;i<100;i++){
				drawAll();
     926:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
     92a:	21 97       	sbiw	r28, 0x01	; 1
			drawAll();
			Lcd4_Clear();
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Player 1 wins !");
			PORTD=0xff;
			for(int i=0;i<100;i++){
     92c:	20 97       	sbiw	r28, 0x00	; 0
     92e:	d9 f7       	brne	.-10     	; 0x926 <check+0x8e>
				drawAll();
			}
			PORTD=0x00;
     930:	12 ba       	out	0x12, r1	; 18
			init_Ball();
     932:	0e 94 c2 00 	call	0x184	; 0x184 <init_Ball>
			init_Bar();
     936:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_Bar>
			pl1_score++;
     93a:	80 91 21 01 	lds	r24, 0x0121
     93e:	90 91 22 01 	lds	r25, 0x0122
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	90 93 22 01 	sts	0x0122, r25
     948:	80 93 21 01 	sts	0x0121, r24
			setLCD();
     94c:	0e 94 35 04 	call	0x86a	; 0x86a <setLCD>
     950:	ca e0       	ldi	r28, 0x0A	; 10
     952:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i=0;i<10;i++){
				drawAll();
     954:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
     958:	21 97       	sbiw	r28, 0x01	; 1
			PORTD=0x00;
			init_Ball();
			init_Bar();
			pl1_score++;
			setLCD();
			for(int i=0;i<10;i++){
     95a:	20 97       	sbiw	r28, 0x00	; 0
     95c:	d9 f7       	brne	.-10     	; 0x954 <check+0xbc>
				drawAll();
			}
		}
	}
	
	if(ball_Y<=bar1_Y+1){
     95e:	20 91 1d 01 	lds	r18, 0x011D
     962:	30 91 1e 01 	lds	r19, 0x011E
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	80 91 67 00 	lds	r24, 0x0067
     96e:	90 91 68 00 	lds	r25, 0x0068
     972:	28 17       	cp	r18, r24
     974:	39 07       	cpc	r19, r25
     976:	0c f4       	brge	.+2      	; 0x97a <check+0xe2>
     978:	53 c0       	rjmp	.+166    	; 0xa20 <check+0x188>
		if(ball_X>bar1_X &&ball_X<=bar1_X+4){
     97a:	80 91 69 00 	lds	r24, 0x0069
     97e:	90 91 6a 00 	lds	r25, 0x006A
     982:	20 91 71 00 	lds	r18, 0x0071
     986:	30 91 72 00 	lds	r19, 0x0072
     98a:	28 17       	cp	r18, r24
     98c:	39 07       	cpc	r19, r25
     98e:	e4 f4       	brge	.+56     	; 0x9c8 <check+0x130>
     990:	2c 5f       	subi	r18, 0xFC	; 252
     992:	3f 4f       	sbci	r19, 0xFF	; 255
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	bc f0       	brlt	.+46     	; 0x9c8 <check+0x130>
		//	ball_Y++;
		//	ball_row2=(ball_row2<<1);
			if(dir==2)dir=3;
     99a:	80 91 65 00 	lds	r24, 0x0065
     99e:	90 91 66 00 	lds	r25, 0x0066
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	91 05       	cpc	r25, r1
     9a6:	39 f4       	brne	.+14     	; 0x9b6 <check+0x11e>
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 66 00 	sts	0x0066, r25
     9b0:	80 93 65 00 	sts	0x0065, r24
     9b4:	35 c0       	rjmp	.+106    	; 0xa20 <check+0x188>
			else if(dir==1)dir=4;
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	99 f5       	brne	.+102    	; 0xa20 <check+0x188>
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	90 93 66 00 	sts	0x0066, r25
     9c2:	80 93 65 00 	sts	0x0065, r24
     9c6:	2c c0       	rjmp	.+88     	; 0xa20 <check+0x188>
			//	_delay_ms(1000);
			}
		else{
			Lcd4_Clear();
     9c8:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
			Lcd4_Write_String("Player 2 wins !");
     9d8:	8b e9       	ldi	r24, 0x9B	; 155
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
			PORTD=0xff;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	82 bb       	out	0x12, r24	; 18
     9e4:	c4 e6       	ldi	r28, 0x64	; 100
     9e6:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i=0;i<100;i++){
				drawAll();
     9e8:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
     9ec:	21 97       	sbiw	r28, 0x01	; 1
		else{
			Lcd4_Clear();
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Player 2 wins !");
			PORTD=0xff;
			for(int i=0;i<100;i++){
     9ee:	20 97       	sbiw	r28, 0x00	; 0
     9f0:	d9 f7       	brne	.-10     	; 0x9e8 <check+0x150>
				drawAll();
			}
			PORTD=0x00;
     9f2:	12 ba       	out	0x12, r1	; 18
			init_Ball();
     9f4:	0e 94 c2 00 	call	0x184	; 0x184 <init_Ball>
			init_Bar();
     9f8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_Bar>
			pl2_score++;			
     9fc:	80 91 1f 01 	lds	r24, 0x011F
     a00:	90 91 20 01 	lds	r25, 0x0120
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	90 93 20 01 	sts	0x0120, r25
     a0a:	80 93 1f 01 	sts	0x011F, r24
			setLCD();
     a0e:	0e 94 35 04 	call	0x86a	; 0x86a <setLCD>
     a12:	ca e0       	ldi	r28, 0x0A	; 10
     a14:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i=0;i<10;i++){
				drawAll();
     a16:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
     a1a:	21 97       	sbiw	r28, 0x01	; 1
			PORTD=0x00;
			init_Ball();
			init_Bar();
			pl2_score++;			
			setLCD();
			for(int i=0;i<10;i++){
     a1c:	20 97       	sbiw	r28, 0x00	; 0
     a1e:	d9 f7       	brne	.-10     	; 0xa16 <check+0x17e>
				drawAll();
			}
		}
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <moveTheBall>:

void moveTheBall()
{
//	check();
	if(dir==1){
     a26:	80 91 65 00 	lds	r24, 0x0065
     a2a:	90 91 66 00 	lds	r25, 0x0066
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	91 05       	cpc	r25, r1
     a32:	09 f0       	breq	.+2      	; 0xa36 <moveTheBall+0x10>
     a34:	69 c0       	rjmp	.+210    	; 0xb08 <moveTheBall+0xe2>
		if(ball_Y>1&&ball_X<8){        //down_right
     a36:	80 91 67 00 	lds	r24, 0x0067
     a3a:	90 91 68 00 	lds	r25, 0x0068
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	91 05       	cpc	r25, r1
     a42:	e4 f1       	brlt	.+120    	; 0xabc <moveTheBall+0x96>
     a44:	20 91 69 00 	lds	r18, 0x0069
     a48:	30 91 6a 00 	lds	r19, 0x006A
     a4c:	28 30       	cpi	r18, 0x08	; 8
     a4e:	31 05       	cpc	r19, r1
     a50:	0c f0       	brlt	.+2      	; 0xa54 <moveTheBall+0x2e>
     a52:	4a c0       	rjmp	.+148    	; 0xae8 <moveTheBall+0xc2>
			ball_Y--;
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	90 93 68 00 	sts	0x0068, r25
     a5a:	80 93 67 00 	sts	0x0067, r24
			ball_X++;
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	30 93 6a 00 	sts	0x006A, r19
     a66:	20 93 69 00 	sts	0x0069, r18
			if (ball_Y==8){
     a6a:	88 30       	cpi	r24, 0x08	; 8
     a6c:	91 05       	cpc	r25, r1
     a6e:	31 f4       	brne	.+12     	; 0xa7c <moveTheBall+0x56>
				ball_row2=0b00000000;
     a70:	10 92 62 00 	sts	0x0062, r1
				ball_row1=0b10000000;
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	80 93 1c 01 	sts	0x011C, r24
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <moveTheBall+0x70>
			}
			else if(ball_Y<8)ball_row1=(ball_row1>>1); //down
     a7c:	08 97       	sbiw	r24, 0x08	; 8
     a7e:	34 f4       	brge	.+12     	; 0xa8c <moveTheBall+0x66>
     a80:	80 91 1c 01 	lds	r24, 0x011C
     a84:	86 95       	lsr	r24
     a86:	80 93 1c 01 	sts	0x011C, r24
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <moveTheBall+0x70>
			else ball_row2=(ball_row2>>1);
     a8c:	80 91 62 00 	lds	r24, 0x0062
     a90:	86 95       	lsr	r24
     a92:	80 93 62 00 	sts	0x0062, r24
			ball_red1=(ball_red1>>1)|0x80; //right
     a96:	80 91 63 00 	lds	r24, 0x0063
     a9a:	86 95       	lsr	r24
     a9c:	80 68       	ori	r24, 0x80	; 128
     a9e:	80 93 63 00 	sts	0x0063, r24
			ball_red2=(ball_red2>>1)|0x80; //right
     aa2:	80 91 60 00 	lds	r24, 0x0060
     aa6:	86 95       	lsr	r24
     aa8:	80 68       	ori	r24, 0x80	; 128
     aaa:	80 93 60 00 	sts	0x0060, r24
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	91 e3       	ldi	r25, 0x31	; 49
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <moveTheBall+0x8c>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <moveTheBall+0x92>
     ab8:	00 00       	nop
     aba:	5b c1       	rjmp	.+694    	; 0xd72 <moveTheBall+0x34c>
			_delay_ms(50);

		}
		else if(ball_X<8){
     abc:	80 91 69 00 	lds	r24, 0x0069
     ac0:	90 91 6a 00 	lds	r25, 0x006A
     ac4:	08 97       	sbiw	r24, 0x08	; 8
     ac6:	84 f4       	brge	.+32     	; 0xae8 <moveTheBall+0xc2>
			PORTD=0xff;
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	82 bb       	out	0x12, r24	; 18
     acc:	8e e1       	ldi	r24, 0x1E	; 30
     ace:	91 e3       	ldi	r25, 0x31	; 49
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <moveTheBall+0xaa>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <moveTheBall+0xb0>
     ad6:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     ad8:	12 ba       	out	0x12, r1	; 18
			dir= 4 ;//up_right
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 66 00 	sts	0x0066, r25
     ae2:	80 93 65 00 	sts	0x0065, r24
     ae6:	45 c1       	rjmp	.+650    	; 0xd72 <moveTheBall+0x34c>
		}
		else{
			PORTD=0xff;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	82 bb       	out	0x12, r24	; 18
     aec:	8e e1       	ldi	r24, 0x1E	; 30
     aee:	91 e3       	ldi	r25, 0x31	; 49
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <moveTheBall+0xca>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <moveTheBall+0xd0>
     af6:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     af8:	12 ba       	out	0x12, r1	; 18
			dir=2;  //down_left
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	90 93 66 00 	sts	0x0066, r25
     b02:	80 93 65 00 	sts	0x0065, r24
     b06:	35 c1       	rjmp	.+618    	; 0xd72 <moveTheBall+0x34c>
		}
	}
	
	else if(dir==2){            //down_left
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	91 05       	cpc	r25, r1
     b0c:	09 f0       	breq	.+2      	; 0xb10 <moveTheBall+0xea>
     b0e:	63 c0       	rjmp	.+198    	; 0xbd6 <moveTheBall+0x1b0>
		if(ball_Y>1 &&ball_X>1){
     b10:	80 91 67 00 	lds	r24, 0x0067
     b14:	90 91 68 00 	lds	r25, 0x0068
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	91 05       	cpc	r25, r1
     b1c:	0c f4       	brge	.+2      	; 0xb20 <moveTheBall+0xfa>
     b1e:	4b c0       	rjmp	.+150    	; 0xbb6 <moveTheBall+0x190>
     b20:	20 91 69 00 	lds	r18, 0x0069
     b24:	30 91 6a 00 	lds	r19, 0x006A
     b28:	22 30       	cpi	r18, 0x02	; 2
     b2a:	31 05       	cpc	r19, r1
     b2c:	a4 f1       	brlt	.+104    	; 0xb96 <moveTheBall+0x170>
			ball_Y--;
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	90 93 68 00 	sts	0x0068, r25
     b34:	80 93 67 00 	sts	0x0067, r24
			ball_X--;
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	31 09       	sbc	r19, r1
     b3c:	30 93 6a 00 	sts	0x006A, r19
     b40:	20 93 69 00 	sts	0x0069, r18
			
			if (ball_Y==8){
     b44:	88 30       	cpi	r24, 0x08	; 8
     b46:	91 05       	cpc	r25, r1
     b48:	31 f4       	brne	.+12     	; 0xb56 <moveTheBall+0x130>
				ball_row2=0b00000000;
     b4a:	10 92 62 00 	sts	0x0062, r1
				ball_row1=0b10000000;
     b4e:	80 e8       	ldi	r24, 0x80	; 128
     b50:	80 93 1c 01 	sts	0x011C, r24
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <moveTheBall+0x14a>
			}
			else if(ball_Y<8)ball_row1=(ball_row1>>1);
     b56:	08 97       	sbiw	r24, 0x08	; 8
     b58:	34 f4       	brge	.+12     	; 0xb66 <moveTheBall+0x140>
     b5a:	80 91 1c 01 	lds	r24, 0x011C
     b5e:	86 95       	lsr	r24
     b60:	80 93 1c 01 	sts	0x011C, r24
     b64:	05 c0       	rjmp	.+10     	; 0xb70 <moveTheBall+0x14a>
			else ball_row2=(ball_row2>>1);
     b66:	80 91 62 00 	lds	r24, 0x0062
     b6a:	86 95       	lsr	r24
     b6c:	80 93 62 00 	sts	0x0062, r24
			
			ball_red1=(ball_red1<<1)|0x01;
     b70:	80 91 63 00 	lds	r24, 0x0063
     b74:	88 0f       	add	r24, r24
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	80 93 63 00 	sts	0x0063, r24
			ball_red2=(ball_red2<<1)|0x01;
     b7c:	80 91 60 00 	lds	r24, 0x0060
     b80:	88 0f       	add	r24, r24
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	80 93 60 00 	sts	0x0060, r24
     b88:	8e e1       	ldi	r24, 0x1E	; 30
     b8a:	91 e3       	ldi	r25, 0x31	; 49
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <moveTheBall+0x166>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <moveTheBall+0x16c>
     b92:	00 00       	nop
     b94:	ee c0       	rjmp	.+476    	; 0xd72 <moveTheBall+0x34c>
			_delay_ms(50);
		}
		else if (ball_Y>1){
			PORTD=0xff;
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	82 bb       	out	0x12, r24	; 18
     b9a:	8e e1       	ldi	r24, 0x1E	; 30
     b9c:	91 e3       	ldi	r25, 0x31	; 49
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <moveTheBall+0x178>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <moveTheBall+0x17e>
     ba4:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     ba6:	12 ba       	out	0x12, r1	; 18
			dir=1; //down_right
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	90 93 66 00 	sts	0x0066, r25
     bb0:	80 93 65 00 	sts	0x0065, r24
     bb4:	de c0       	rjmp	.+444    	; 0xd72 <moveTheBall+0x34c>
		}
		else{
			PORTD=0xff;
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	82 bb       	out	0x12, r24	; 18
     bba:	8e e1       	ldi	r24, 0x1E	; 30
     bbc:	91 e3       	ldi	r25, 0x31	; 49
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <moveTheBall+0x198>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <moveTheBall+0x19e>
     bc4:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     bc6:	12 ba       	out	0x12, r1	; 18
			dir=3;  //up_left
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 66 00 	sts	0x0066, r25
     bd0:	80 93 65 00 	sts	0x0065, r24
     bd4:	ce c0       	rjmp	.+412    	; 0xd72 <moveTheBall+0x34c>
		}
	}
	else if(dir==3){                //up_left
     bd6:	03 97       	sbiw	r24, 0x03	; 3
     bd8:	09 f0       	breq	.+2      	; 0xbdc <moveTheBall+0x1b6>
     bda:	69 c0       	rjmp	.+210    	; 0xcae <moveTheBall+0x288>
		if(ball_Y<16 &&ball_X>1){
     bdc:	80 91 67 00 	lds	r24, 0x0067
     be0:	90 91 68 00 	lds	r25, 0x0068
     be4:	80 31       	cpi	r24, 0x10	; 16
     be6:	91 05       	cpc	r25, r1
     be8:	e4 f5       	brge	.+120    	; 0xc62 <moveTheBall+0x23c>
     bea:	20 91 69 00 	lds	r18, 0x0069
     bee:	30 91 6a 00 	lds	r19, 0x006A
     bf2:	22 30       	cpi	r18, 0x02	; 2
     bf4:	31 05       	cpc	r19, r1
     bf6:	0c f4       	brge	.+2      	; 0xbfa <moveTheBall+0x1d4>
     bf8:	4a c0       	rjmp	.+148    	; 0xc8e <moveTheBall+0x268>
			ball_Y++;
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	90 93 68 00 	sts	0x0068, r25
     c00:	80 93 67 00 	sts	0x0067, r24
			ball_X--;
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	31 09       	sbc	r19, r1
     c08:	30 93 6a 00 	sts	0x006A, r19
     c0c:	20 93 69 00 	sts	0x0069, r18
			
			if(ball_Y==9){
     c10:	89 30       	cpi	r24, 0x09	; 9
     c12:	91 05       	cpc	r25, r1
     c14:	31 f4       	brne	.+12     	; 0xc22 <moveTheBall+0x1fc>
				ball_row1=0b00000000;
     c16:	10 92 1c 01 	sts	0x011C, r1
				ball_row2=0b00000001;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 62 00 	sts	0x0062, r24
     c20:	0d c0       	rjmp	.+26     	; 0xc3c <moveTheBall+0x216>
			}
			else if(ball_Y<9)ball_row1=(ball_row1<<1);
     c22:	09 97       	sbiw	r24, 0x09	; 9
     c24:	34 f4       	brge	.+12     	; 0xc32 <moveTheBall+0x20c>
     c26:	80 91 1c 01 	lds	r24, 0x011C
     c2a:	88 0f       	add	r24, r24
     c2c:	80 93 1c 01 	sts	0x011C, r24
     c30:	05 c0       	rjmp	.+10     	; 0xc3c <moveTheBall+0x216>
			else ball_row2=(ball_row2<<1);
     c32:	80 91 62 00 	lds	r24, 0x0062
     c36:	88 0f       	add	r24, r24
     c38:	80 93 62 00 	sts	0x0062, r24
			
			ball_red1=(ball_red1<<1)|0x01;
     c3c:	80 91 63 00 	lds	r24, 0x0063
     c40:	88 0f       	add	r24, r24
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	80 93 63 00 	sts	0x0063, r24
			ball_red2=(ball_red2<<1)|0x01;
     c48:	80 91 60 00 	lds	r24, 0x0060
     c4c:	88 0f       	add	r24, r24
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	80 93 60 00 	sts	0x0060, r24
     c54:	8e e1       	ldi	r24, 0x1E	; 30
     c56:	91 e3       	ldi	r25, 0x31	; 49
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <moveTheBall+0x232>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <moveTheBall+0x238>
     c5e:	00 00       	nop
     c60:	88 c0       	rjmp	.+272    	; 0xd72 <moveTheBall+0x34c>
			_delay_ms(50);
		}
		else if(ball_X>1){
     c62:	80 91 69 00 	lds	r24, 0x0069
     c66:	90 91 6a 00 	lds	r25, 0x006A
     c6a:	02 97       	sbiw	r24, 0x02	; 2
     c6c:	84 f0       	brlt	.+32     	; 0xc8e <moveTheBall+0x268>
			PORTD=0xff;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	82 bb       	out	0x12, r24	; 18
     c72:	8e e1       	ldi	r24, 0x1E	; 30
     c74:	91 e3       	ldi	r25, 0x31	; 49
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <moveTheBall+0x250>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <moveTheBall+0x256>
     c7c:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     c7e:	12 ba       	out	0x12, r1	; 18
			dir=2; //down_left
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 66 00 	sts	0x0066, r25
     c88:	80 93 65 00 	sts	0x0065, r24
     c8c:	72 c0       	rjmp	.+228    	; 0xd72 <moveTheBall+0x34c>
		}
		else{
			PORTD=0xff;
     c8e:	8f ef       	ldi	r24, 0xFF	; 255
     c90:	82 bb       	out	0x12, r24	; 18
     c92:	8e e1       	ldi	r24, 0x1E	; 30
     c94:	91 e3       	ldi	r25, 0x31	; 49
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <moveTheBall+0x270>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <moveTheBall+0x276>
     c9c:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     c9e:	12 ba       	out	0x12, r1	; 18
			dir=4;  //up_right
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	90 93 66 00 	sts	0x0066, r25
     ca8:	80 93 65 00 	sts	0x0065, r24
     cac:	62 c0       	rjmp	.+196    	; 0xd72 <moveTheBall+0x34c>
		}
	}
	else{                            //up_right
		if(ball_Y<16 &&ball_X<8){
     cae:	80 91 67 00 	lds	r24, 0x0067
     cb2:	90 91 68 00 	lds	r25, 0x0068
     cb6:	80 31       	cpi	r24, 0x10	; 16
     cb8:	91 05       	cpc	r25, r1
     cba:	0c f0       	brlt	.+2      	; 0xcbe <moveTheBall+0x298>
     cbc:	4b c0       	rjmp	.+150    	; 0xd54 <moveTheBall+0x32e>
     cbe:	20 91 69 00 	lds	r18, 0x0069
     cc2:	30 91 6a 00 	lds	r19, 0x006A
     cc6:	28 30       	cpi	r18, 0x08	; 8
     cc8:	31 05       	cpc	r19, r1
     cca:	a4 f5       	brge	.+104    	; 0xd34 <moveTheBall+0x30e>
			ball_Y++;
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	90 93 68 00 	sts	0x0068, r25
     cd2:	80 93 67 00 	sts	0x0067, r24
			ball_X++;
     cd6:	2f 5f       	subi	r18, 0xFF	; 255
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	30 93 6a 00 	sts	0x006A, r19
     cde:	20 93 69 00 	sts	0x0069, r18
			if(ball_Y==9){
     ce2:	89 30       	cpi	r24, 0x09	; 9
     ce4:	91 05       	cpc	r25, r1
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <moveTheBall+0x2ce>
				ball_row1=0b00000000;
     ce8:	10 92 1c 01 	sts	0x011C, r1
				ball_row2=0b00000001;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 62 00 	sts	0x0062, r24
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <moveTheBall+0x2e8>
			}
			else if(ball_Y<9)ball_row1=(ball_row1<<1); //up
     cf4:	09 97       	sbiw	r24, 0x09	; 9
     cf6:	34 f4       	brge	.+12     	; 0xd04 <moveTheBall+0x2de>
     cf8:	80 91 1c 01 	lds	r24, 0x011C
     cfc:	88 0f       	add	r24, r24
     cfe:	80 93 1c 01 	sts	0x011C, r24
     d02:	05 c0       	rjmp	.+10     	; 0xd0e <moveTheBall+0x2e8>
			else ball_row2=(ball_row2<<1);
     d04:	80 91 62 00 	lds	r24, 0x0062
     d08:	88 0f       	add	r24, r24
     d0a:	80 93 62 00 	sts	0x0062, r24
			ball_red1=(ball_red1>>1)|0x80; //right
     d0e:	80 91 63 00 	lds	r24, 0x0063
     d12:	86 95       	lsr	r24
     d14:	80 68       	ori	r24, 0x80	; 128
     d16:	80 93 63 00 	sts	0x0063, r24
			ball_red2=(ball_red2>>1)|0x80; //right
     d1a:	80 91 60 00 	lds	r24, 0x0060
     d1e:	86 95       	lsr	r24
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	80 93 60 00 	sts	0x0060, r24
     d26:	8e e1       	ldi	r24, 0x1E	; 30
     d28:	91 e3       	ldi	r25, 0x31	; 49
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <moveTheBall+0x304>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <moveTheBall+0x30a>
     d30:	00 00       	nop
     d32:	1f c0       	rjmp	.+62     	; 0xd72 <moveTheBall+0x34c>
			_delay_ms(50);
		}
		else if(ball_Y<16) 
		{
			PORTD=0xff;
     d34:	8f ef       	ldi	r24, 0xFF	; 255
     d36:	82 bb       	out	0x12, r24	; 18
     d38:	8e e1       	ldi	r24, 0x1E	; 30
     d3a:	91 e3       	ldi	r25, 0x31	; 49
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <moveTheBall+0x316>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <moveTheBall+0x31c>
     d42:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     d44:	12 ba       	out	0x12, r1	; 18
			dir=3 ;//up_left
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 66 00 	sts	0x0066, r25
     d4e:	80 93 65 00 	sts	0x0065, r24
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <moveTheBall+0x34c>
		}
		else {
			PORTD=0xff;
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	82 bb       	out	0x12, r24	; 18
     d58:	8e e1       	ldi	r24, 0x1E	; 30
     d5a:	91 e3       	ldi	r25, 0x31	; 49
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <moveTheBall+0x336>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <moveTheBall+0x33c>
     d62:	00 00       	nop
			_delay_ms(50);
			PORTD=0x00;
     d64:	12 ba       	out	0x12, r1	; 18
			dir=1; //down_right
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	90 93 66 00 	sts	0x0066, r25
     d6e:	80 93 65 00 	sts	0x0065, r24
		}
	}
	check();
     d72:	0e 94 4c 04 	call	0x898	; 0x898 <check>
     d76:	08 95       	ret

00000d78 <vertical1>:
#define MPU6050_GETATTITUDE 0


void vertical1(int16_t ax){
	
	if(ax < 0){
     d78:	99 23       	and	r25, r25
     d7a:	1c f4       	brge	.+6      	; 0xd82 <vertical1+0xa>
		goUp1();
     d7c:	0e 94 8c 01 	call	0x318	; 0x318 <goUp1>
     d80:	08 95       	ret
	}
	else if(ax > 0){
     d82:	18 16       	cp	r1, r24
     d84:	19 06       	cpc	r1, r25
     d86:	14 f4       	brge	.+4      	; 0xd8c <vertical1+0x14>
		goDown1();
     d88:	0e 94 a4 01 	call	0x348	; 0x348 <goDown1>
     d8c:	08 95       	ret

00000d8e <horizontal1>:
	}
}
 
void horizontal1(int16_t ay){	
	if(ay < 0){
     d8e:	99 23       	and	r25, r25
     d90:	1c f4       	brge	.+6      	; 0xd98 <horizontal1+0xa>
		goRight1();
     d92:	0e 94 d5 01 	call	0x3aa	; 0x3aa <goRight1>
     d96:	08 95       	ret
	}
	else if(ay > 0){
     d98:	18 16       	cp	r1, r24
     d9a:	19 06       	cpc	r1, r25
     d9c:	14 f4       	brge	.+4      	; 0xda2 <horizontal1+0x14>
		goLeft1();
     d9e:	0e 94 bc 01 	call	0x378	; 0x378 <goLeft1>
     da2:	08 95       	ret

00000da4 <vertical2>:
	}
}

void vertical2(int16_t ax){
	
	if(ax < 0){
     da4:	99 23       	and	r25, r25
     da6:	1c f4       	brge	.+6      	; 0xdae <vertical2+0xa>
		goUp2();
     da8:	0e 94 2a 01 	call	0x254	; 0x254 <goUp2>
     dac:	08 95       	ret
	}

	else if(ax > 0){
     dae:	18 16       	cp	r1, r24
     db0:	19 06       	cpc	r1, r25
     db2:	14 f4       	brge	.+4      	; 0xdb8 <vertical2+0x14>
		goDown2();
     db4:	0e 94 42 01 	call	0x284	; 0x284 <goDown2>
     db8:	08 95       	ret

00000dba <horizontal2>:
	}
}

void horizontal2(int16_t ay){
	if(ay < 0){
     dba:	99 23       	and	r25, r25
     dbc:	1c f4       	brge	.+6      	; 0xdc4 <horizontal2+0xa>
		goRight2();
     dbe:	0e 94 73 01 	call	0x2e6	; 0x2e6 <goRight2>
     dc2:	08 95       	ret
	}
	else if(ay > 0){
     dc4:	18 16       	cp	r1, r24
     dc6:	19 06       	cpc	r1, r25
     dc8:	14 f4       	brge	.+4      	; 0xdce <horizontal2+0x14>
		goLeft2();
     dca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <goLeft2>
     dce:	08 95       	ret

00000dd0 <main>:
}




int main(void) {
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	2c 97       	sbiw	r28, 0x0c	; 12
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
	
	DDRA = 0xFF;
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	8a bb       	out	0x1a, r24	; 26
	DDRD =0xFF;
     de8:	81 bb       	out	0x11, r24	; 17

	
	ADMUX = 0b00100000;
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000010;
     dee:	82 e8       	ldi	r24, 0x82	; 130
     df0:	86 b9       	out	0x06, r24	; 6


	Lcd4_Init();
     df2:	0e 94 b5 03 	call	0x76a	; 0x76a <Lcd4_Init>
	drawAll();
     df6:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
	Lcd4_Clear();
     dfa:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Welcome o_O");
     e06:	8b ea       	ldi	r24, 0xAB	; 171
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     e0e:	2f eb       	ldi	r18, 0xBF	; 191
     e10:	84 e7       	ldi	r24, 0x74	; 116
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	90 40       	sbci	r25, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <main+0x44>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <main+0x4e>
     e1e:	00 00       	nop
	_delay_ms(800);
	Lcd4_Clear();
     e20:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Don't drop");
     e2c:	87 eb       	ldi	r24, 0xB7	; 183
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     e34:	ef ed       	ldi	r30, 0xDF	; 223
     e36:	f3 e2       	ldi	r31, 0x23	; 35
     e38:	26 e0       	ldi	r18, 0x06	; 6
     e3a:	e1 50       	subi	r30, 0x01	; 1
     e3c:	f0 40       	sbci	r31, 0x00	; 0
     e3e:	20 40       	sbci	r18, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x6a>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <main+0x74>
     e44:	00 00       	nop
	_delay_ms(2000);
	Lcd4_Set_Cursor(2,4);
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("the bomb -_-");
     e4e:	82 ec       	ldi	r24, 0xC2	; 194
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     e56:	8f ed       	ldi	r24, 0xDF	; 223
     e58:	93 e2       	ldi	r25, 0x23	; 35
     e5a:	e6 e0       	ldi	r30, 0x06	; 6
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	90 40       	sbci	r25, 0x00	; 0
     e60:	e0 40       	sbci	r30, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <main+0x8c>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <main+0x96>
     e66:	00 00       	nop
	_delay_ms(2000);
	
	Lcd4_Clear();
     e68:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("<-Player 2");
     e74:	8f ec       	ldi	r24, 0xCF	; 207
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     e7c:	ff eb       	ldi	r31, 0xBF	; 191
     e7e:	24 e7       	ldi	r18, 0x74	; 116
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	f1 50       	subi	r31, 0x01	; 1
     e84:	20 40       	sbci	r18, 0x00	; 0
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	e1 f7       	brne	.-8      	; 0xe82 <main+0xb2>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <main+0xbc>
     e8c:	00 00       	nop
	_delay_ms(800);
	Lcd4_Set_Cursor(2,6);
     e8e:	66 e0       	ldi	r22, 0x06	; 6
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Player 1->");
     e96:	8a ed       	ldi	r24, 0xDA	; 218
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     e9e:	9f ed       	ldi	r25, 0xDF	; 223
     ea0:	e3 e2       	ldi	r30, 0x23	; 35
     ea2:	f6 e0       	ldi	r31, 0x06	; 6
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	e0 40       	sbci	r30, 0x00	; 0
     ea8:	f0 40       	sbci	r31, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <main+0xd4>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <main+0xde>
     eae:	00 00       	nop
	_delay_ms(2000);

	Lcd4_Clear();
     eb0:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,3);
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Ready ?");
     ebc:	85 ee       	ldi	r24, 0xE5	; 229
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     ec4:	2f ed       	ldi	r18, 0xDF	; 223
     ec6:	83 e2       	ldi	r24, 0x23	; 35
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	80 40       	sbci	r24, 0x00	; 0
     ece:	90 40       	sbci	r25, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <main+0xfa>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0x104>
     ed4:	00 00       	nop
	_delay_ms(2000);
	Lcd4_Set_Cursor(2,6);
     ed6:	66 e0       	ldi	r22, 0x06	; 6
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Go !");
     ede:	8d ee       	ldi	r24, 0xED	; 237
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
     ee6:	ef ee       	ldi	r30, 0xEF	; 239
     ee8:	f1 e1       	ldi	r31, 0x11	; 17
     eea:	23 e0       	ldi	r18, 0x03	; 3
     eec:	e1 50       	subi	r30, 0x01	; 1
     eee:	f0 40       	sbci	r31, 0x00	; 0
     ef0:	20 40       	sbci	r18, 0x00	; 0
     ef2:	e1 f7       	brne	.-8      	; 0xeec <main+0x11c>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <main+0x126>
     ef6:	00 00       	nop
	_delay_ms(1000);

	setLCD();
     ef8:	0e 94 35 04 	call	0x86a	; 0x86a <setLCD>
	
	
	
	GyroAddr = (0x69 << 1);
     efc:	82 ed       	ldi	r24, 0xD2	; 210
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	90 93 3c 01 	sts	0x013C, r25
     f04:	80 93 3b 01 	sts	0x013B, r24
//	GyroAddr = (0x68 << 1);


	#if MPU6050_GETATTITUDE == 0
	int16_t ax = 0;
     f08:	1a 82       	std	Y+2, r1	; 0x02
     f0a:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     f0c:	1c 82       	std	Y+4, r1	; 0x04
     f0e:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     f10:	1e 82       	std	Y+6, r1	; 0x06
     f12:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     f14:	18 86       	std	Y+8, r1	; 0x08
     f16:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     f18:	1a 86       	std	Y+10, r1	; 0x0a
     f1a:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     f1c:	1c 86       	std	Y+12, r1	; 0x0c
     f1e:	1b 86       	std	Y+11, r1	; 0x0b

	//init uart
	//uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));

	//init interrupt
	sei();
     f20:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     f22:	0e 94 19 0a 	call	0x1432	; 0x1432 <mpu6050_init>
     f26:	8e e1       	ldi	r24, 0x1E	; 30
     f28:	91 e3       	ldi	r25, 0x31	; 49
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <main+0x15a>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <main+0x160>
     f30:	00 00       	nop
	_delay_ms(10);
	#endif
	
	int which = 0;
	
	HC595Init();
     f32:	0e 94 49 00 	call	0x92	; 0x92 <HC595Init>
	mpu6050_dmpInitialize();
	mpu6050_dmpEnable();
	_delay_ms(10);
	#endif
	
	int which = 0;
     f36:	c1 2c       	mov	r12, r1
     f38:	d1 2c       	mov	r13, r1
		{
			GyroAddr = (0x69 << 1);
		}
		else
		{
			GyroAddr = (0x68 << 1);
     f3a:	0f 2e       	mov	r0, r31
     f3c:	f0 ed       	ldi	r31, 0xD0	; 208
     f3e:	4f 2e       	mov	r4, r31
     f40:	51 2c       	mov	r5, r1
     f42:	f0 2d       	mov	r31, r0
	extern	int pl1_score,pl2_score;
	while(1) {
		
		if(which)
		{
			GyroAddr = (0x69 << 1);
     f44:	0f 2e       	mov	r0, r31
     f46:	f2 ed       	ldi	r31, 0xD2	; 210
     f48:	2f 2e       	mov	r2, r31
     f4a:	31 2c       	mov	r3, r1
     f4c:	f0 2d       	mov	r31, r0
			setLCD();
		}		
		
		
		Lcd4_Set_Cursor(1,6);
		Lcd4_Write_Char('0'+pl1_score);
     f4e:	0f 2e       	mov	r0, r31
     f50:	f1 e2       	ldi	r31, 0x21	; 33
     f52:	8f 2e       	mov	r8, r31
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	9f 2e       	mov	r9, r31
     f58:	f0 2d       	mov	r31, r0
		Lcd4_Write_Char('-');
		Lcd4_Write_Char('0'+pl2_score);
     f5a:	0f 2e       	mov	r0, r31
     f5c:	ff e1       	ldi	r31, 0x1F	; 31
     f5e:	af 2e       	mov	r10, r31
     f60:	f1 e0       	ldi	r31, 0x01	; 1
     f62:	bf 2e       	mov	r11, r31
     f64:	f0 2d       	mov	r31, r0
	//	if(which) twoA(ax);
	//	else twoB(ax);
		
		//twoB(ax);
		
		which = 1 - which;
     f66:	66 24       	eor	r6, r6
     f68:	63 94       	inc	r6
     f6a:	71 2c       	mov	r7, r1
	HC595Init();
	
	extern	int pl1_score,pl2_score;
	while(1) {
		
		if(which)
     f6c:	c1 14       	cp	r12, r1
     f6e:	d1 04       	cpc	r13, r1
     f70:	29 f1       	breq	.+74     	; 0xfbc <main+0x1ec>
		{
			GyroAddr = (0x69 << 1);
     f72:	30 92 3c 01 	sts	0x013C, r3
     f76:	20 92 3b 01 	sts	0x013B, r2
		{
			GyroAddr = (0x68 << 1);
		}
		
		//#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     f7a:	fe 01       	movw	r30, r28
     f7c:	3b 96       	adiw	r30, 0x0b	; 11
     f7e:	7f 01       	movw	r14, r30
     f80:	8e 01       	movw	r16, r28
     f82:	07 5f       	subi	r16, 0xF7	; 247
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	9e 01       	movw	r18, r28
     f88:	29 5f       	subi	r18, 0xF9	; 249
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	ae 01       	movw	r20, r28
     f8e:	4b 5f       	subi	r20, 0xFB	; 251
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	be 01       	movw	r22, r28
     f94:	6d 5f       	subi	r22, 0xFD	; 253
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <mpu6050_getRawData>
		//mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		//#endif
		
		ax = -ax;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	91 95       	neg	r25
     fa6:	81 95       	neg	r24
     fa8:	91 09       	sbc	r25, r1
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
		
		//stay();
		if(which){
			vertical1(ax);
     fae:	0e 94 bc 06 	call	0xd78	; 0xd78 <vertical1>
			horizontal1(ay);
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <horizontal1>
     fba:	23 c0       	rjmp	.+70     	; 0x1002 <main+0x232>
		{
			GyroAddr = (0x69 << 1);
		}
		else
		{
			GyroAddr = (0x68 << 1);
     fbc:	50 92 3c 01 	sts	0x013C, r5
     fc0:	40 92 3b 01 	sts	0x013B, r4
		}
		
		//#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     fc4:	ce 01       	movw	r24, r28
     fc6:	0b 96       	adiw	r24, 0x0b	; 11
     fc8:	7c 01       	movw	r14, r24
     fca:	8e 01       	movw	r16, r28
     fcc:	07 5f       	subi	r16, 0xF7	; 247
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	9e 01       	movw	r18, r28
     fd2:	29 5f       	subi	r18, 0xF9	; 249
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	ae 01       	movw	r20, r28
     fd8:	4b 5f       	subi	r20, 0xFB	; 251
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	be 01       	movw	r22, r28
     fde:	6d 5f       	subi	r22, 0xFD	; 253
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	0a 97       	sbiw	r24, 0x0a	; 10
     fe4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <mpu6050_getRawData>
		//mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		//#endif
		
		ax = -ax;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	91 95       	neg	r25
     fee:	81 95       	neg	r24
     ff0:	91 09       	sbc	r25, r1
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
		if(which){
			vertical1(ax);
			horizontal1(ay);
		}else
		{
			vertical2(ax);
     ff6:	0e 94 d2 06 	call	0xda4	; 0xda4 <vertical2>
			horizontal2(ay);
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	0e 94 dd 06 	call	0xdba	; 0xdba <horizontal2>
		}
		drawAll();
    1002:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
		moveTheBall();
    1006:	0e 94 13 05 	call	0xa26	; 0xa26 <moveTheBall>
		
		
		if(pl1_score==5||pl2_score==5){
    100a:	80 91 21 01 	lds	r24, 0x0121
    100e:	90 91 22 01 	lds	r25, 0x0122
    1012:	05 97       	sbiw	r24, 0x05	; 5
    1014:	31 f0       	breq	.+12     	; 0x1022 <main+0x252>
    1016:	80 91 1f 01 	lds	r24, 0x011F
    101a:	90 91 20 01 	lds	r25, 0x0120
    101e:	05 97       	sbiw	r24, 0x05	; 5
    1020:	69 f5       	brne	.+90     	; 0x107c <main+0x2ac>
			init_score();
    1022:	0e 94 b9 00 	call	0x172	; 0x172 <init_score>
			init_Ball();
    1026:	0e 94 c2 00 	call	0x184	; 0x184 <init_Ball>
			init_Bar();
    102a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_Bar>
			Lcd4_Clear();
    102e:	0e 94 91 03 	call	0x722	; 0x722 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
			Lcd4_Write_String("Game OVER");
    103a:	82 ef       	ldi	r24, 0xF2	; 242
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
			if(pl1_score==5)Lcd4_Write_String("Player 1 wins!!");
    104a:	80 91 21 01 	lds	r24, 0x0121
    104e:	90 91 22 01 	lds	r25, 0x0122
    1052:	05 97       	sbiw	r24, 0x05	; 5
    1054:	29 f4       	brne	.+10     	; 0x1060 <main+0x290>
    1056:	8c ef       	ldi	r24, 0xFC	; 252
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
    105e:	30 c0       	rjmp	.+96     	; 0x10c0 <main+0x2f0>
			else Lcd4_Write_String("Player 2 wins!!");
    1060:	8c e0       	ldi	r24, 0x0C	; 12
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	0e 94 26 04 	call	0x84c	; 0x84c <Lcd4_Write_String>
    1068:	2b c0       	rjmp	.+86     	; 0x10c0 <main+0x2f0>
			for(int i=0;i<1000;i++){
				drawAll();
    106a:	0e 94 09 01 	call	0x212	; 0x212 <drawAll>
    106e:	01 50       	subi	r16, 0x01	; 1
    1070:	11 09       	sbc	r17, r1
			Lcd4_Set_Cursor(1,0);
			Lcd4_Write_String("Game OVER");
			Lcd4_Set_Cursor(2,0);
			if(pl1_score==5)Lcd4_Write_String("Player 1 wins!!");
			else Lcd4_Write_String("Player 2 wins!!");
			for(int i=0;i<1000;i++){
    1072:	01 15       	cp	r16, r1
    1074:	11 05       	cpc	r17, r1
    1076:	c9 f7       	brne	.-14     	; 0x106a <main+0x29a>
				drawAll();
			}
			setLCD();
    1078:	0e 94 35 04 	call	0x86a	; 0x86a <setLCD>
		}		
		
		
		Lcd4_Set_Cursor(1,6);
    107c:	66 e0       	ldi	r22, 0x06	; 6
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
		Lcd4_Write_Char('0'+pl1_score);
    1084:	f4 01       	movw	r30, r8
    1086:	80 81       	ld	r24, Z
    1088:	80 5d       	subi	r24, 0xD0	; 208
    108a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Lcd4_Write_Char>
		Lcd4_Write_Char('-');
    108e:	8d e2       	ldi	r24, 0x2D	; 45
    1090:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Lcd4_Write_Char>
		Lcd4_Write_Char('0'+pl2_score);
    1094:	f5 01       	movw	r30, r10
    1096:	80 81       	ld	r24, Z
    1098:	80 5d       	subi	r24, 0xD0	; 208
    109a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Lcd4_Write_Char>
		Lcd4_Set_Cursor(2,5);
    109e:	65 e0       	ldi	r22, 0x05	; 5
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	0e 94 98 03 	call	0x730	; 0x730 <Lcd4_Set_Cursor>
		Lcd4_Write_Char('0'+pl1_score+pl2_score+1);
    10a6:	f4 01       	movw	r30, r8
    10a8:	90 81       	ld	r25, Z
    10aa:	f5 01       	movw	r30, r10
    10ac:	80 81       	ld	r24, Z
    10ae:	89 0f       	add	r24, r25
    10b0:	8f 5c       	subi	r24, 0xCF	; 207
    10b2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Lcd4_Write_Char>
	//	if(which) twoA(ax);
	//	else twoB(ax);
		
		//twoB(ax);
		
		which = 1 - which;
    10b6:	c3 01       	movw	r24, r6
    10b8:	8c 19       	sub	r24, r12
    10ba:	9d 09       	sbc	r25, r13
    10bc:	6c 01       	movw	r12, r24
		
		
		//PORTA = ax & 0xFF;
		
		//_delay_ms(10);
	}
    10be:	56 cf       	rjmp	.-340    	; 0xf6c <main+0x19c>
	mpu6050_dmpInitialize();
	mpu6050_dmpEnable();
	_delay_ms(10);
	#endif
	
	int which = 0;
    10c0:	08 ee       	ldi	r16, 0xE8	; 232
    10c2:	13 e0       	ldi	r17, 0x03	; 3
    10c4:	d2 cf       	rjmp	.-92     	; 0x106a <main+0x29a>

000010c6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    10c6:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    10c8:	8c e0       	ldi	r24, 0x0C	; 12
    10ca:	80 b9       	out	0x00, r24	; 0
    10cc:	08 95       	ret

000010ce <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    10ce:	94 ea       	ldi	r25, 0xA4	; 164
    10d0:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    10d2:	4f ef       	ldi	r20, 0xFF	; 255
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    10da:	06 b6       	in	r0, 0x36	; 54
    10dc:	07 fc       	sbrc	r0, 7
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <i2c_start+0x1e>
    10e0:	41 50       	subi	r20, 0x01	; 1
    10e2:	51 09       	sbc	r21, r1
    10e4:	61 09       	sbc	r22, r1
    10e6:	71 09       	sbc	r23, r1
    10e8:	c0 f7       	brcc	.-16     	; 0x10da <i2c_start+0xc>
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <i2c_start+0x26>
	if(i2c_timer == 0)
    10ec:	45 2b       	or	r20, r21
    10ee:	46 2b       	or	r20, r22
    10f0:	47 2b       	or	r20, r23
    10f2:	11 f1       	breq	.+68     	; 0x1138 <i2c_start+0x6a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    10f4:	91 b1       	in	r25, 0x01	; 1
    10f6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    10f8:	98 30       	cpi	r25, 0x08	; 8
    10fa:	11 f0       	breq	.+4      	; 0x1100 <i2c_start+0x32>
    10fc:	90 31       	cpi	r25, 0x10	; 16
    10fe:	f1 f4       	brne	.+60     	; 0x113c <i2c_start+0x6e>

	// send device address
	TWDR = address;
    1100:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1102:	84 e8       	ldi	r24, 0x84	; 132
    1104:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    110e:	06 b6       	in	r0, 0x36	; 54
    1110:	07 fc       	sbrc	r0, 7
    1112:	05 c0       	rjmp	.+10     	; 0x111e <i2c_start+0x50>
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	a1 09       	sbc	r26, r1
    1118:	b1 09       	sbc	r27, r1
    111a:	c8 f7       	brcc	.-14     	; 0x110e <i2c_start+0x40>
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <i2c_start+0x58>
	if(i2c_timer == 0)
    111e:	89 2b       	or	r24, r25
    1120:	8a 2b       	or	r24, r26
    1122:	8b 2b       	or	r24, r27
    1124:	69 f0       	breq	.+26     	; 0x1140 <i2c_start+0x72>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1126:	91 b1       	in	r25, 0x01	; 1
    1128:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    112a:	98 31       	cpi	r25, 0x18	; 24
    112c:	59 f0       	breq	.+22     	; 0x1144 <i2c_start+0x76>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 34       	cpi	r25, 0x40	; 64
    1132:	49 f4       	brne	.+18     	; 0x1146 <i2c_start+0x78>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1144:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1146:	08 95       	ret

00001148 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1148:	84 e9       	ldi	r24, 0x94	; 148
    114a:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	06 b6       	in	r0, 0x36	; 54
    1152:	04 fe       	sbrs	r0, 4
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <i2c_stop+0x18>
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	81 15       	cp	r24, r1
    115a:	21 e0       	ldi	r18, 0x01	; 1
    115c:	92 07       	cpc	r25, r18
    115e:	c1 f7       	brne	.-16     	; 0x1150 <i2c_stop+0x8>
    1160:	08 95       	ret

00001162 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1162:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1164:	84 e8       	ldi	r24, 0x84	; 132
    1166:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1170:	06 b6       	in	r0, 0x36	; 54
    1172:	07 fc       	sbrc	r0, 7
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <i2c_write+0x1e>
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	a1 09       	sbc	r26, r1
    117a:	b1 09       	sbc	r27, r1
    117c:	c8 f7       	brcc	.-14     	; 0x1170 <i2c_write+0xe>
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <i2c_write+0x26>
	if(i2c_timer == 0)
    1180:	89 2b       	or	r24, r25
    1182:	8a 2b       	or	r24, r26
    1184:	8b 2b       	or	r24, r27
    1186:	39 f0       	breq	.+14     	; 0x1196 <i2c_write+0x34>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1188:	91 b1       	in	r25, 0x01	; 1
    118a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	98 32       	cpi	r25, 0x28	; 40
    1190:	19 f4       	brne	.+6      	; 0x1198 <i2c_write+0x36>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1198:	08 95       	ret

0000119a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    119a:	84 ec       	ldi	r24, 0xC4	; 196
    119c:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11a6:	06 b6       	in	r0, 0x36	; 54
    11a8:	07 fc       	sbrc	r0, 7
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <i2c_readAck+0x1c>
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	a1 09       	sbc	r26, r1
    11b0:	b1 09       	sbc	r27, r1
    11b2:	c8 f7       	brcc	.-14     	; 0x11a6 <i2c_readAck+0xc>
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <i2c_readAck+0x24>
	if(i2c_timer == 0)
    11b6:	89 2b       	or	r24, r25
    11b8:	8a 2b       	or	r24, r26
    11ba:	8b 2b       	or	r24, r27
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <i2c_readAck+0x28>
		return 0;

    return TWDR;
    11be:	83 b1       	in	r24, 0x03	; 3
    11c0:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    11c2:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    11c4:	08 95       	ret

000011c6 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    11c6:	84 e8       	ldi	r24, 0x84	; 132
    11c8:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11d2:	06 b6       	in	r0, 0x36	; 54
    11d4:	07 fc       	sbrc	r0, 7
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <i2c_readNak+0x1c>
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	a1 09       	sbc	r26, r1
    11dc:	b1 09       	sbc	r27, r1
    11de:	c8 f7       	brcc	.-14     	; 0x11d2 <i2c_readNak+0xc>
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <i2c_readNak+0x24>
	if(i2c_timer == 0)
    11e2:	89 2b       	or	r24, r25
    11e4:	8a 2b       	or	r24, r26
    11e6:	8b 2b       	or	r24, r27
    11e8:	11 f0       	breq	.+4      	; 0x11ee <i2c_readNak+0x28>
		return 0;
	
    return TWDR;
    11ea:	83 b1       	in	r24, 0x03	; 3
    11ec:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    11f0:	08 95       	ret

000011f2 <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	18 2f       	mov	r17, r24
    1202:	d6 2e       	mov	r13, r22
    1204:	d4 2f       	mov	r29, r20
    1206:	c5 2f       	mov	r28, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
    1208:	66 23       	and	r22, r22
    120a:	69 f1       	breq	.+90     	; 0x1266 <mpu6050_readBytes+0x74>
		//request register
		i2c_start( GyroAddr | I2C_WRITE);
    120c:	80 91 3b 01 	lds	r24, 0x013B
    1210:	0e 94 67 08 	call	0x10ce	; 0x10ce <i2c_start>
		i2c_write(regAddr);
    1214:	81 2f       	mov	r24, r17
    1216:	0e 94 b1 08 	call	0x1162	; 0x1162 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	8a 95       	dec	r24
    121e:	f1 f7       	brne	.-4      	; 0x121c <mpu6050_readBytes+0x2a>
    1220:	00 00       	nop
		_delay_us(10);
		//read data
		i2c_start( GyroAddr | I2C_READ);
    1222:	80 91 3b 01 	lds	r24, 0x013B
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	0e 94 67 08 	call	0x10ce	; 0x10ce <i2c_start>
    122c:	0d 2f       	mov	r16, r29
    122e:	1c 2f       	mov	r17, r28
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
    1234:	ed 2c       	mov	r14, r13
    1236:	f1 2c       	mov	r15, r1
    1238:	e1 e0       	ldi	r30, 0x01	; 1
    123a:	ee 1a       	sub	r14, r30
    123c:	f1 08       	sbc	r15, r1
    123e:	ce 15       	cp	r28, r14
    1240:	df 05       	cpc	r29, r15
    1242:	29 f4       	brne	.+10     	; 0x124e <mpu6050_readBytes+0x5c>
				data[i] = i2c_readNak();
    1244:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <i2c_readNak>
    1248:	f8 01       	movw	r30, r16
    124a:	80 83       	st	Z, r24
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <mpu6050_readBytes+0x64>
			else
				data[i] = i2c_readAck();
    124e:	0e 94 cd 08 	call	0x119a	; 0x119a <i2c_readAck>
    1252:	f8 01       	movw	r30, r16
    1254:	80 83       	st	Z, r24
    1256:	21 96       	adiw	r28, 0x01	; 1
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start( GyroAddr | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start( GyroAddr | I2C_READ);
		for(i=0; i<length; i++) {
    125c:	cd 15       	cp	r28, r13
    125e:	78 f3       	brcs	.-34     	; 0x123e <mpu6050_readBytes+0x4c>
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
    1260:	0e 94 a4 08 	call	0x1148	; 0x1148 <i2c_stop>
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <mpu6050_readBytes+0x76>
/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
    1266:	d1 2c       	mov	r13, r1
				data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
    1268:	8d 2d       	mov	r24, r13
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	08 95       	ret

0000127a <mpu6050_readByte>:

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    127a:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <mpu6050_readBytes>
}
    1282:	08 95       	ret

00001284 <mpu6050_writeBytes>:

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	c8 2f       	mov	r28, r24
    1290:	06 2f       	mov	r16, r22
    1292:	f4 2e       	mov	r15, r20
    1294:	15 2f       	mov	r17, r21
	if(length > 0) {
    1296:	66 23       	and	r22, r22
    1298:	91 f0       	breq	.+36     	; 0x12be <mpu6050_writeBytes+0x3a>
		//write data
		i2c_start( GyroAddr | I2C_WRITE);
    129a:	80 91 3b 01 	lds	r24, 0x013B
    129e:	0e 94 67 08 	call	0x10ce	; 0x10ce <i2c_start>
		i2c_write(regAddr); //reg
    12a2:	8c 2f       	mov	r24, r28
    12a4:	0e 94 b1 08 	call	0x1162	; 0x1162 <i2c_write>
    12a8:	cf 2d       	mov	r28, r15
    12aa:	d1 2f       	mov	r29, r17
		for (uint8_t i = 0; i < length; i++) {
    12ac:	10 e0       	ldi	r17, 0x00	; 0
			i2c_write((uint8_t) data[i]);
    12ae:	89 91       	ld	r24, Y+
    12b0:	0e 94 b1 08 	call	0x1162	; 0x1162 <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start( GyroAddr | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
    12b4:	1f 5f       	subi	r17, 0xFF	; 255
    12b6:	10 13       	cpse	r17, r16
    12b8:	fa cf       	rjmp	.-12     	; 0x12ae <mpu6050_writeBytes+0x2a>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
    12ba:	0e 94 a4 08 	call	0x1148	; 0x1148 <i2c_stop>
	}
}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	08 95       	ret

000012ca <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	1f 92       	push	r1
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
    12d6:	ae 01       	movw	r20, r28
    12d8:	4f 5f       	subi	r20, 0xFF	; 255
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	0e 94 42 09 	call	0x1284	; 0x1284 <mpu6050_writeBytes>
}
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <mpu6050_readBit>:
}

/*
 * read 1 bit from chip register
 */
int8_t mpu6050_readBit(uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	1f 92       	push	r1
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	f6 2e       	mov	r15, r22
    12fc:	8a 01       	movw	r16, r20
    uint8_t b;
    uint8_t count = mpu6050_readByte(regAddr, &b);
    12fe:	be 01       	movw	r22, r28
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	0e 94 3d 09 	call	0x127a	; 0x127a <mpu6050_readByte>
    *data = b & (1 << bitNum);
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	b9 01       	movw	r22, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <mpu6050_readBit+0x2a>
    1310:	66 0f       	add	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	fa 94       	dec	r15
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <mpu6050_readBit+0x26>
    1318:	99 81       	ldd	r25, Y+1	; 0x01
    131a:	69 23       	and	r22, r25
    131c:	f8 01       	movw	r30, r16
    131e:	60 83       	st	Z, r22
    return count;
}
    1320:	0f 90       	pop	r0
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	08 95       	ret

0000132e <mpu6050_writeBits>:

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	1f 92       	push	r1
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	18 2f       	mov	r17, r24
    1342:	e6 2e       	mov	r14, r22
    1344:	f4 2e       	mov	r15, r20
    1346:	02 2f       	mov	r16, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
    1348:	44 23       	and	r20, r20
    134a:	91 f1       	breq	.+100    	; 0x13b0 <mpu6050_writeBits+0x82>
		uint8_t b = 0;
    134c:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    134e:	be 01       	movw	r22, r28
    1350:	6f 5f       	subi	r22, 0xFF	; 255
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	0e 94 3d 09 	call	0x127a	; 0x127a <mpu6050_readByte>
    1358:	88 23       	and	r24, r24
    135a:	51 f1       	breq	.+84     	; 0x13b0 <mpu6050_writeBits+0x82>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    135c:	6e 2d       	mov	r22, r14
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	6f 19       	sub	r22, r15
    1362:	71 09       	sbc	r23, r1
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	e1 e0       	ldi	r30, 0x01	; 1
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	af 01       	movw	r20, r30
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <mpu6050_writeBits+0x46>
    1370:	44 0f       	add	r20, r20
    1372:	55 1f       	adc	r21, r21
    1374:	fa 94       	dec	r15
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <mpu6050_writeBits+0x42>
    1378:	41 50       	subi	r20, 0x01	; 1
    137a:	51 09       	sbc	r21, r1
    137c:	06 2e       	mov	r0, r22
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <mpu6050_writeBits+0x56>
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <mpu6050_writeBits+0x52>
			data <<= (bitStart - length + 1); // shift data into correct position
    1388:	20 2f       	mov	r18, r16
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	c9 01       	movw	r24, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <mpu6050_writeBits+0x66>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	6a 95       	dec	r22
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <mpu6050_writeBits+0x62>
    1398:	bc 01       	movw	r22, r24
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
    139a:	94 2f       	mov	r25, r20
    139c:	90 95       	com	r25
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	89 23       	and	r24, r25
	if(length > 0) {
		uint8_t b = 0;
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
			data <<= (bitStart - length + 1); // shift data into correct position
			data &= mask; // zero all non-important bits in data
    13a2:	46 23       	and	r20, r22
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    13a4:	68 2f       	mov	r22, r24
    13a6:	64 2b       	or	r22, r20
    13a8:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    13aa:	81 2f       	mov	r24, r17
    13ac:	0e 94 65 09 	call	0x12ca	; 0x12ca <mpu6050_writeByte>
		}
	}
}
    13b0:	0f 90       	pop	r0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	08 95       	ret

000013c0 <mpu6050_writeBit>:

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	1f 92       	push	r1
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	18 2f       	mov	r17, r24
    13d2:	06 2f       	mov	r16, r22
    13d4:	f4 2e       	mov	r15, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    13d6:	be 01       	movw	r22, r28
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	0e 94 3d 09 	call	0x127a	; 0x127a <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    13e0:	ff 20       	and	r15, r15
    13e2:	59 f0       	breq	.+22     	; 0x13fa <mpu6050_writeBit+0x3a>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	b9 01       	movw	r22, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <mpu6050_writeBit+0x30>
    13ec:	66 0f       	add	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	0a 95       	dec	r16
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <mpu6050_writeBit+0x2c>
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	68 2b       	or	r22, r24
    13f8:	0b c0       	rjmp	.+22     	; 0x1410 <mpu6050_writeBit+0x50>
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	b9 01       	movw	r22, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <mpu6050_writeBit+0x46>
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	0a 95       	dec	r16
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <mpu6050_writeBit+0x42>
    140a:	60 95       	com	r22
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	68 23       	and	r22, r24
    1410:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    1412:	81 2f       	mov	r24, r17
    1414:	0e 94 65 09 	call	0x12ca	; 0x12ca <mpu6050_writeByte>
}
    1418:	0f 90       	pop	r0
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	08 95       	ret

00001426 <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	66 e0       	ldi	r22, 0x06	; 6
    142a:	8b e6       	ldi	r24, 0x6B	; 107
    142c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <mpu6050_writeBit>
    1430:	08 95       	ret

00001432 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    1432:	0e 94 63 08 	call	0x10c6	; 0x10c6 <i2c_init>
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	8a 95       	dec	r24
    143a:	f1 f7       	brne	.-4      	; 0x1438 <mpu6050_init+0x6>
    143c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    143e:	87 ea       	ldi	r24, 0xA7	; 167
    1440:	91 e6       	ldi	r25, 0x61	; 97
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <mpu6050_init+0x10>
    1446:	00 c0       	rjmp	.+0      	; 0x1448 <mpu6050_init+0x16>
    1448:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    144a:	0e 94 13 0a 	call	0x1426	; 0x1426 <mpu6050_setSleepDisabled>
    144e:	83 ec       	ldi	r24, 0xC3	; 195
    1450:	99 e0       	ldi	r25, 0x09	; 9
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <mpu6050_init+0x20>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <mpu6050_init+0x26>
    1458:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	43 e0       	ldi	r20, 0x03	; 3
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	8b e6       	ldi	r24, 0x6B	; 107
    1462:	0e 94 97 09 	call	0x132e	; 0x132e <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1466:	23 e0       	ldi	r18, 0x03	; 3
    1468:	43 e0       	ldi	r20, 0x03	; 3
    146a:	62 e0       	ldi	r22, 0x02	; 2
    146c:	8a e1       	ldi	r24, 0x1A	; 26
    146e:	0e 94 97 09 	call	0x132e	; 0x132e <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	89 e1       	ldi	r24, 0x19	; 25
    1476:	0e 94 65 09 	call	0x12ca	; 0x12ca <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    147a:	23 e0       	ldi	r18, 0x03	; 3
    147c:	42 e0       	ldi	r20, 0x02	; 2
    147e:	64 e0       	ldi	r22, 0x04	; 4
    1480:	8b e1       	ldi	r24, 0x1B	; 27
    1482:	0e 94 97 09 	call	0x132e	; 0x132e <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	64 e0       	ldi	r22, 0x04	; 4
    148c:	8c e1       	ldi	r24, 0x1C	; 28
    148e:	0e 94 97 09 	call	0x132e	; 0x132e <mpu6050_writeBits>
    1492:	08 95       	ret

00001494 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	4c 01       	movw	r8, r24
    14ae:	5b 01       	movw	r10, r22
    14b0:	6a 01       	movw	r12, r20
    14b2:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    14b4:	4d e3       	ldi	r20, 0x3D	; 61
    14b6:	51 e0       	ldi	r21, 0x01	; 1
    14b8:	6e e0       	ldi	r22, 0x0E	; 14
    14ba:	8b e3       	ldi	r24, 0x3B	; 59
    14bc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    14c0:	20 91 3d 01 	lds	r18, 0x013D
    14c4:	80 91 3e 01 	lds	r24, 0x013E
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	92 2b       	or	r25, r18
    14cc:	f4 01       	movw	r30, r8
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    14d2:	20 91 3f 01 	lds	r18, 0x013F
    14d6:	80 91 40 01 	lds	r24, 0x0140
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	92 2b       	or	r25, r18
    14de:	f5 01       	movw	r30, r10
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    14e4:	20 91 41 01 	lds	r18, 0x0141
    14e8:	80 91 42 01 	lds	r24, 0x0142
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	92 2b       	or	r25, r18
    14f0:	f6 01       	movw	r30, r12
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    14f6:	20 91 45 01 	lds	r18, 0x0145
    14fa:	80 91 46 01 	lds	r24, 0x0146
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	92 2b       	or	r25, r18
    1502:	99 83       	std	Y+1, r25	; 0x01
    1504:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1506:	20 91 47 01 	lds	r18, 0x0147
    150a:	80 91 48 01 	lds	r24, 0x0148
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	92 2b       	or	r25, r18
    1512:	f8 01       	movw	r30, r16
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1518:	20 91 49 01 	lds	r18, 0x0149
    151c:	80 91 4a 01 	lds	r24, 0x014A
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	92 2b       	or	r25, r18
    1524:	f7 01       	movw	r30, r14
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	08 95       	ret

00001544 <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
    1544:	4f 92       	push	r4
    1546:	5f 92       	push	r5
    1548:	6f 92       	push	r6
    154a:	7f 92       	push	r7
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	a4 97       	sbiw	r28, 0x24	; 36
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	69 87       	std	Y+9, r22	; 0x09
    1576:	7a 87       	std	Y+10, r23	; 0x0a
    1578:	8b 87       	std	Y+11, r24	; 0x0b
    157a:	9c 87       	std	Y+12, r25	; 0x0c
    157c:	2d 87       	std	Y+13, r18	; 0x0d
    157e:	3e 87       	std	Y+14, r19	; 0x0e
    1580:	4f 87       	std	Y+15, r20	; 0x0f
    1582:	58 8b       	std	Y+16, r21	; 0x10
    1584:	e9 8a       	std	Y+17, r14	; 0x11
    1586:	fa 8a       	std	Y+18, r15	; 0x12
    1588:	0b 8b       	std	Y+19, r16	; 0x13
    158a:	1c 8b       	std	Y+20, r17	; 0x14
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	a9 01       	movw	r20, r18
    1592:	c6 01       	movw	r24, r12
    1594:	b5 01       	movw	r22, r10
    1596:	0e 94 bd 10 	call	0x217a	; 0x217a <__cmpsf2>
    159a:	81 11       	cpse	r24, r1
    159c:	17 c0       	rjmp	.+46     	; 0x15cc <mpu6050_mahonyUpdate+0x88>
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	6f a9       	ldd	r22, Y+55	; 0x37
    15a6:	78 ad       	ldd	r23, Y+56	; 0x38
    15a8:	89 ad       	ldd	r24, Y+57	; 0x39
    15aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    15ac:	0e 94 bd 10 	call	0x217a	; 0x217a <__cmpsf2>
    15b0:	81 11       	cpse	r24, r1
    15b2:	0c c0       	rjmp	.+24     	; 0x15cc <mpu6050_mahonyUpdate+0x88>
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	a9 01       	movw	r20, r18
    15ba:	6b ad       	ldd	r22, Y+59	; 0x3b
    15bc:	7c ad       	ldd	r23, Y+60	; 0x3c
    15be:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c2:	0e 94 bd 10 	call	0x217a	; 0x217a <__cmpsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	09 f4       	brne	.+2      	; 0x15cc <mpu6050_mahonyUpdate+0x88>
    15ca:	04 c2       	rjmp	.+1032   	; 0x19d4 <mpu6050_mahonyUpdate+0x490>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
    15cc:	a6 01       	movw	r20, r12
    15ce:	95 01       	movw	r18, r10
    15d0:	c6 01       	movw	r24, r12
    15d2:	b5 01       	movw	r22, r10
    15d4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    15d8:	2b 01       	movw	r4, r22
    15da:	3c 01       	movw	r6, r24
    15dc:	2f a9       	ldd	r18, Y+55	; 0x37
    15de:	38 ad       	ldd	r19, Y+56	; 0x38
    15e0:	49 ad       	ldd	r20, Y+57	; 0x39
    15e2:	5a ad       	ldd	r21, Y+58	; 0x3a
    15e4:	ca 01       	movw	r24, r20
    15e6:	b9 01       	movw	r22, r18
    15e8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	c3 01       	movw	r24, r6
    15f2:	b2 01       	movw	r22, r4
    15f4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    15f8:	2b 01       	movw	r4, r22
    15fa:	3c 01       	movw	r6, r24
    15fc:	2b ad       	ldd	r18, Y+59	; 0x3b
    15fe:	3c ad       	ldd	r19, Y+60	; 0x3c
    1600:	4d ad       	ldd	r20, Y+61	; 0x3d
    1602:	5e ad       	ldd	r21, Y+62	; 0x3e
    1604:	ca 01       	movw	r24, r20
    1606:	b9 01       	movw	r22, r18
    1608:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	c3 01       	movw	r24, r6
    1612:	b2 01       	movw	r22, r4
    1614:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1618:	0e 94 42 12 	call	0x2484	; 0x2484 <sqrt>
    161c:	2b 01       	movw	r4, r22
    161e:	3c 01       	movw	r6, r24
		ax /= norm;
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	c6 01       	movw	r24, r12
    1626:	b5 01       	movw	r22, r10
    1628:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    162c:	6d 8b       	std	Y+21, r22	; 0x15
    162e:	7e 8b       	std	Y+22, r23	; 0x16
    1630:	8f 8b       	std	Y+23, r24	; 0x17
    1632:	98 8f       	std	Y+24, r25	; 0x18
		ay /= norm;
    1634:	a3 01       	movw	r20, r6
    1636:	92 01       	movw	r18, r4
    1638:	6f a9       	ldd	r22, Y+55	; 0x37
    163a:	78 ad       	ldd	r23, Y+56	; 0x38
    163c:	89 ad       	ldd	r24, Y+57	; 0x39
    163e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1640:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1644:	69 83       	std	Y+1, r22	; 0x01
    1646:	7a 83       	std	Y+2, r23	; 0x02
    1648:	8b 83       	std	Y+3, r24	; 0x03
    164a:	9c 83       	std	Y+4, r25	; 0x04
		az /= norm;
    164c:	a3 01       	movw	r20, r6
    164e:	92 01       	movw	r18, r4
    1650:	6b ad       	ldd	r22, Y+59	; 0x3b
    1652:	7c ad       	ldd	r23, Y+60	; 0x3c
    1654:	8d ad       	ldd	r24, Y+61	; 0x3d
    1656:	9e ad       	ldd	r25, Y+62	; 0x3e
    1658:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    165c:	6d 83       	std	Y+5, r22	; 0x05
    165e:	7e 83       	std	Y+6, r23	; 0x06
    1660:	8f 83       	std	Y+7, r24	; 0x07
    1662:	98 87       	std	Y+8, r25	; 0x08

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
    1664:	60 91 37 01 	lds	r22, 0x0137
    1668:	70 91 38 01 	lds	r23, 0x0138
    166c:	80 91 39 01 	lds	r24, 0x0139
    1670:	90 91 3a 01 	lds	r25, 0x013A
    1674:	20 91 2f 01 	lds	r18, 0x012F
    1678:	30 91 30 01 	lds	r19, 0x0130
    167c:	40 91 31 01 	lds	r20, 0x0131
    1680:	50 91 32 01 	lds	r21, 0x0132
    1684:	80 90 77 00 	lds	r8, 0x0077
    1688:	90 90 78 00 	lds	r9, 0x0078
    168c:	a0 90 79 00 	lds	r10, 0x0079
    1690:	b0 90 7a 00 	lds	r11, 0x007A
    1694:	40 90 33 01 	lds	r4, 0x0133
    1698:	50 90 34 01 	lds	r5, 0x0134
    169c:	60 90 35 01 	lds	r6, 0x0135
    16a0:	70 90 36 01 	lds	r7, 0x0136
    16a4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    16a8:	6b 01       	movw	r12, r22
    16aa:	7c 01       	movw	r14, r24
    16ac:	a3 01       	movw	r20, r6
    16ae:	92 01       	movw	r18, r4
    16b0:	c5 01       	movw	r24, r10
    16b2:	b4 01       	movw	r22, r8
    16b4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    16c4:	69 8f       	std	Y+25, r22	; 0x19
    16c6:	7a 8f       	std	Y+26, r23	; 0x1a
    16c8:	8b 8f       	std	Y+27, r24	; 0x1b
    16ca:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
    16cc:	60 91 77 00 	lds	r22, 0x0077
    16d0:	70 91 78 00 	lds	r23, 0x0078
    16d4:	80 91 79 00 	lds	r24, 0x0079
    16d8:	90 91 7a 00 	lds	r25, 0x007A
    16dc:	20 91 37 01 	lds	r18, 0x0137
    16e0:	30 91 38 01 	lds	r19, 0x0138
    16e4:	40 91 39 01 	lds	r20, 0x0139
    16e8:	50 91 3a 01 	lds	r21, 0x013A
    16ec:	80 90 33 01 	lds	r8, 0x0133
    16f0:	90 90 34 01 	lds	r9, 0x0134
    16f4:	a0 90 35 01 	lds	r10, 0x0135
    16f8:	b0 90 36 01 	lds	r11, 0x0136
    16fc:	40 90 2f 01 	lds	r4, 0x012F
    1700:	50 90 30 01 	lds	r5, 0x0130
    1704:	60 90 31 01 	lds	r6, 0x0131
    1708:	70 90 32 01 	lds	r7, 0x0132
    170c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1710:	6b 01       	movw	r12, r22
    1712:	7c 01       	movw	r14, r24
    1714:	a3 01       	movw	r20, r6
    1716:	92 01       	movw	r18, r4
    1718:	c5 01       	movw	r24, r10
    171a:	b4 01       	movw	r22, r8
    171c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1720:	9b 01       	movw	r18, r22
    1722:	ac 01       	movw	r20, r24
    1724:	c7 01       	movw	r24, r14
    1726:	b6 01       	movw	r22, r12
    1728:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    172c:	6d 8f       	std	Y+29, r22	; 0x1d
    172e:	7e 8f       	std	Y+30, r23	; 0x1e
    1730:	8f 8f       	std	Y+31, r24	; 0x1f
    1732:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5f + q3 * q3;
    1734:	60 91 77 00 	lds	r22, 0x0077
    1738:	70 91 78 00 	lds	r23, 0x0078
    173c:	80 91 79 00 	lds	r24, 0x0079
    1740:	90 91 7a 00 	lds	r25, 0x007A
    1744:	20 91 77 00 	lds	r18, 0x0077
    1748:	30 91 78 00 	lds	r19, 0x0078
    174c:	40 91 79 00 	lds	r20, 0x0079
    1750:	50 91 7a 00 	lds	r21, 0x007A
    1754:	80 90 2f 01 	lds	r8, 0x012F
    1758:	90 90 30 01 	lds	r9, 0x0130
    175c:	a0 90 31 01 	lds	r10, 0x0131
    1760:	b0 90 32 01 	lds	r11, 0x0132
    1764:	40 90 2f 01 	lds	r4, 0x012F
    1768:	50 90 30 01 	lds	r5, 0x0130
    176c:	60 90 31 01 	lds	r6, 0x0131
    1770:	70 90 32 01 	lds	r7, 0x0132
    1774:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1784:	6b 01       	movw	r12, r22
    1786:	7c 01       	movw	r14, r24
    1788:	a3 01       	movw	r20, r6
    178a:	92 01       	movw	r18, r4
    178c:	c5 01       	movw	r24, r10
    178e:	b4 01       	movw	r22, r8
    1790:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
    1798:	c7 01       	movw	r24, r14
    179a:	b6 01       	movw	r22, r12
    179c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    17a0:	6b 01       	movw	r12, r22
    17a2:	7c 01       	movw	r14, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
    17a4:	9b 01       	movw	r18, r22
    17a6:	ac 01       	movw	r20, r24
    17a8:	69 81       	ldd	r22, Y+1	; 0x01
    17aa:	7a 81       	ldd	r23, Y+2	; 0x02
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    17b4:	4b 01       	movw	r8, r22
    17b6:	5c 01       	movw	r10, r24
    17b8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17ba:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17bc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    17be:	58 a1       	ldd	r21, Y+32	; 0x20
    17c0:	6d 81       	ldd	r22, Y+5	; 0x05
    17c2:	7e 81       	ldd	r23, Y+6	; 0x06
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	c5 01       	movw	r24, r10
    17d2:	b4 01       	movw	r22, r8
    17d4:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    17d8:	69 a3       	std	Y+33, r22	; 0x21
    17da:	7a a3       	std	Y+34, r23	; 0x22
    17dc:	8b a3       	std	Y+35, r24	; 0x23
    17de:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
    17e0:	29 8d       	ldd	r18, Y+25	; 0x19
    17e2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17e4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    17e6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    17e8:	6d 81       	ldd	r22, Y+5	; 0x05
    17ea:	7e 81       	ldd	r23, Y+6	; 0x06
    17ec:	8f 81       	ldd	r24, Y+7	; 0x07
    17ee:	98 85       	ldd	r25, Y+8	; 0x08
    17f0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    17f4:	4b 01       	movw	r8, r22
    17f6:	5c 01       	movw	r10, r24
    17f8:	a7 01       	movw	r20, r14
    17fa:	96 01       	movw	r18, r12
    17fc:	6d 89       	ldd	r22, Y+21	; 0x15
    17fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1800:	8f 89       	ldd	r24, Y+23	; 0x17
    1802:	98 8d       	ldd	r25, Y+24	; 0x18
    1804:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	c5 01       	movw	r24, r10
    180e:	b4 01       	movw	r22, r8
    1810:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1814:	2b 01       	movw	r4, r22
    1816:	3c 01       	movw	r6, r24
		halfez = (ax * halfvy - ay * halfvx);
    1818:	2d 8d       	ldd	r18, Y+29	; 0x1d
    181a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    181c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    181e:	58 a1       	ldd	r21, Y+32	; 0x20
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    182c:	6b 01       	movw	r12, r22
    182e:	7c 01       	movw	r14, r24
    1830:	29 8d       	ldd	r18, Y+25	; 0x19
    1832:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1834:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1836:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1838:	69 81       	ldd	r22, Y+1	; 0x01
    183a:	7a 81       	ldd	r23, Y+2	; 0x02
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	c7 01       	movw	r24, r14
    184a:	b6 01       	movw	r22, r12
    184c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1850:	4b 01       	movw	r8, r22
    1852:	5c 01       	movw	r10, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
    1854:	c0 90 2b 01 	lds	r12, 0x012B
    1858:	d0 90 2c 01 	lds	r13, 0x012C
    185c:	e0 90 2d 01 	lds	r14, 0x012D
    1860:	f0 90 2e 01 	lds	r15, 0x012E
    1864:	2d ec       	ldi	r18, 0xCD	; 205
    1866:	3c ec       	ldi	r19, 0xCC	; 204
    1868:	4c e4       	ldi	r20, 0x4C	; 76
    186a:	5e e3       	ldi	r21, 0x3E	; 62
    186c:	69 a1       	ldd	r22, Y+33	; 0x21
    186e:	7a a1       	ldd	r23, Y+34	; 0x22
    1870:	8b a1       	ldd	r24, Y+35	; 0x23
    1872:	9c a1       	ldd	r25, Y+36	; 0x24
    1874:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1878:	2a e8       	ldi	r18, 0x8A	; 138
    187a:	3b e4       	ldi	r19, 0x4B	; 75
    187c:	46 e8       	ldi	r20, 0x86	; 134
    187e:	5c e3       	ldi	r21, 0x3C	; 60
    1880:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1884:	a7 01       	movw	r20, r14
    1886:	96 01       	movw	r18, r12
    1888:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    188c:	60 93 2b 01 	sts	0x012B, r22
    1890:	70 93 2c 01 	sts	0x012C, r23
    1894:	80 93 2d 01 	sts	0x012D, r24
    1898:	90 93 2e 01 	sts	0x012E, r25
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
    189c:	c0 90 27 01 	lds	r12, 0x0127
    18a0:	d0 90 28 01 	lds	r13, 0x0128
    18a4:	e0 90 29 01 	lds	r14, 0x0129
    18a8:	f0 90 2a 01 	lds	r15, 0x012A
    18ac:	2d ec       	ldi	r18, 0xCD	; 205
    18ae:	3c ec       	ldi	r19, 0xCC	; 204
    18b0:	4c e4       	ldi	r20, 0x4C	; 76
    18b2:	5e e3       	ldi	r21, 0x3E	; 62
    18b4:	c3 01       	movw	r24, r6
    18b6:	b2 01       	movw	r22, r4
    18b8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    18bc:	2a e8       	ldi	r18, 0x8A	; 138
    18be:	3b e4       	ldi	r19, 0x4B	; 75
    18c0:	46 e8       	ldi	r20, 0x86	; 134
    18c2:	5c e3       	ldi	r21, 0x3C	; 60
    18c4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    18c8:	a7 01       	movw	r20, r14
    18ca:	96 01       	movw	r18, r12
    18cc:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    18d0:	60 93 27 01 	sts	0x0127, r22
    18d4:	70 93 28 01 	sts	0x0128, r23
    18d8:	80 93 29 01 	sts	0x0129, r24
    18dc:	90 93 2a 01 	sts	0x012A, r25
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
    18e0:	c0 90 23 01 	lds	r12, 0x0123
    18e4:	d0 90 24 01 	lds	r13, 0x0124
    18e8:	e0 90 25 01 	lds	r14, 0x0125
    18ec:	f0 90 26 01 	lds	r15, 0x0126
    18f0:	2d ec       	ldi	r18, 0xCD	; 205
    18f2:	3c ec       	ldi	r19, 0xCC	; 204
    18f4:	4c e4       	ldi	r20, 0x4C	; 76
    18f6:	5e e3       	ldi	r21, 0x3E	; 62
    18f8:	c5 01       	movw	r24, r10
    18fa:	b4 01       	movw	r22, r8
    18fc:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1900:	2a e8       	ldi	r18, 0x8A	; 138
    1902:	3b e4       	ldi	r19, 0x4B	; 75
    1904:	46 e8       	ldi	r20, 0x86	; 134
    1906:	5c e3       	ldi	r21, 0x3C	; 60
    1908:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    190c:	a7 01       	movw	r20, r14
    190e:	96 01       	movw	r18, r12
    1910:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1914:	60 93 23 01 	sts	0x0123, r22
    1918:	70 93 24 01 	sts	0x0124, r23
    191c:	80 93 25 01 	sts	0x0125, r24
    1920:	90 93 26 01 	sts	0x0126, r25
			gx += integralFBx;	// apply integral feedback
    1924:	20 91 2b 01 	lds	r18, 0x012B
    1928:	30 91 2c 01 	lds	r19, 0x012C
    192c:	40 91 2d 01 	lds	r20, 0x012D
    1930:	50 91 2e 01 	lds	r21, 0x012E
    1934:	69 85       	ldd	r22, Y+9	; 0x09
    1936:	7a 85       	ldd	r23, Y+10	; 0x0a
    1938:	8b 85       	ldd	r24, Y+11	; 0x0b
    193a:	9c 85       	ldd	r25, Y+12	; 0x0c
    193c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1940:	69 83       	std	Y+1, r22	; 0x01
    1942:	7a 83       	std	Y+2, r23	; 0x02
    1944:	8b 83       	std	Y+3, r24	; 0x03
    1946:	9c 83       	std	Y+4, r25	; 0x04
			gy += integralFBy;
    1948:	20 91 27 01 	lds	r18, 0x0127
    194c:	30 91 28 01 	lds	r19, 0x0128
    1950:	40 91 29 01 	lds	r20, 0x0129
    1954:	50 91 2a 01 	lds	r21, 0x012A
    1958:	6d 85       	ldd	r22, Y+13	; 0x0d
    195a:	7e 85       	ldd	r23, Y+14	; 0x0e
    195c:	8f 85       	ldd	r24, Y+15	; 0x0f
    195e:	98 89       	ldd	r25, Y+16	; 0x10
    1960:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1964:	6d 83       	std	Y+5, r22	; 0x05
    1966:	7e 83       	std	Y+6, r23	; 0x06
    1968:	8f 83       	std	Y+7, r24	; 0x07
    196a:	98 87       	std	Y+8, r25	; 0x08
			gz += integralFBz;
    196c:	20 91 23 01 	lds	r18, 0x0123
    1970:	30 91 24 01 	lds	r19, 0x0124
    1974:	40 91 25 01 	lds	r20, 0x0125
    1978:	50 91 26 01 	lds	r21, 0x0126
    197c:	69 89       	ldd	r22, Y+17	; 0x11
    197e:	7a 89       	ldd	r23, Y+18	; 0x12
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	9c 89       	ldd	r25, Y+20	; 0x14
    1984:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1988:	6b 01       	movw	r12, r22
    198a:	7c 01       	movw	r14, r24
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
    198c:	29 a1       	ldd	r18, Y+33	; 0x21
    198e:	3a a1       	ldd	r19, Y+34	; 0x22
    1990:	4b a1       	ldd	r20, Y+35	; 0x23
    1992:	5c a1       	ldd	r21, Y+36	; 0x24
    1994:	69 81       	ldd	r22, Y+1	; 0x01
    1996:	7a 81       	ldd	r23, Y+2	; 0x02
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    19a0:	69 87       	std	Y+9, r22	; 0x09
    19a2:	7a 87       	std	Y+10, r23	; 0x0a
    19a4:	8b 87       	std	Y+11, r24	; 0x0b
    19a6:	9c 87       	std	Y+12, r25	; 0x0c
		gy += mpu6050_mahonytwoKpDef * halfey;
    19a8:	a3 01       	movw	r20, r6
    19aa:	92 01       	movw	r18, r4
    19ac:	6d 81       	ldd	r22, Y+5	; 0x05
    19ae:	7e 81       	ldd	r23, Y+6	; 0x06
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    19b8:	6d 87       	std	Y+13, r22	; 0x0d
    19ba:	7e 87       	std	Y+14, r23	; 0x0e
    19bc:	8f 87       	std	Y+15, r24	; 0x0f
    19be:	98 8b       	std	Y+16, r25	; 0x10
		gz += mpu6050_mahonytwoKpDef * halfez;
    19c0:	a5 01       	movw	r20, r10
    19c2:	94 01       	movw	r18, r8
    19c4:	c7 01       	movw	r24, r14
    19c6:	b6 01       	movw	r22, r12
    19c8:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    19cc:	69 8b       	std	Y+17, r22	; 0x11
    19ce:	7a 8b       	std	Y+18, r23	; 0x12
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	9c 8b       	std	Y+20, r25	; 0x14
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
    19d4:	2a e8       	ldi	r18, 0x8A	; 138
    19d6:	3b e4       	ldi	r19, 0x4B	; 75
    19d8:	46 e0       	ldi	r20, 0x06	; 6
    19da:	5c e3       	ldi	r21, 0x3C	; 60
    19dc:	69 85       	ldd	r22, Y+9	; 0x09
    19de:	7a 85       	ldd	r23, Y+10	; 0x0a
    19e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19e4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    19e8:	69 83       	std	Y+1, r22	; 0x01
    19ea:	7a 83       	std	Y+2, r23	; 0x02
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	9c 83       	std	Y+4, r25	; 0x04
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
    19f0:	2a e8       	ldi	r18, 0x8A	; 138
    19f2:	3b e4       	ldi	r19, 0x4B	; 75
    19f4:	46 e0       	ldi	r20, 0x06	; 6
    19f6:	5c e3       	ldi	r21, 0x3C	; 60
    19f8:	6d 85       	ldd	r22, Y+13	; 0x0d
    19fa:	7e 85       	ldd	r23, Y+14	; 0x0e
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	98 89       	ldd	r25, Y+16	; 0x10
    1a00:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1a04:	6d 83       	std	Y+5, r22	; 0x05
    1a06:	7e 83       	std	Y+6, r23	; 0x06
    1a08:	8f 83       	std	Y+7, r24	; 0x07
    1a0a:	98 87       	std	Y+8, r25	; 0x08
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
    1a0c:	2a e8       	ldi	r18, 0x8A	; 138
    1a0e:	3b e4       	ldi	r19, 0x4B	; 75
    1a10:	46 e0       	ldi	r20, 0x06	; 6
    1a12:	5c e3       	ldi	r21, 0x3C	; 60
    1a14:	69 89       	ldd	r22, Y+17	; 0x11
    1a16:	7a 89       	ldd	r23, Y+18	; 0x12
    1a18:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1a20:	69 87       	std	Y+9, r22	; 0x09
    1a22:	7a 87       	std	Y+10, r23	; 0x0a
    1a24:	8b 87       	std	Y+11, r24	; 0x0b
    1a26:	9c 87       	std	Y+12, r25	; 0x0c
	qa = q0;
    1a28:	e0 90 77 00 	lds	r14, 0x0077
    1a2c:	f0 90 78 00 	lds	r15, 0x0078
    1a30:	00 91 79 00 	lds	r16, 0x0079
    1a34:	10 91 7a 00 	lds	r17, 0x007A
    1a38:	ed 86       	std	Y+13, r14	; 0x0d
    1a3a:	fe 86       	std	Y+14, r15	; 0x0e
    1a3c:	0f 87       	std	Y+15, r16	; 0x0f
    1a3e:	18 8b       	std	Y+16, r17	; 0x10
	qb = q1;
    1a40:	e0 90 37 01 	lds	r14, 0x0137
    1a44:	f0 90 38 01 	lds	r15, 0x0138
    1a48:	00 91 39 01 	lds	r16, 0x0139
    1a4c:	10 91 3a 01 	lds	r17, 0x013A
    1a50:	e9 8a       	std	Y+17, r14	; 0x11
    1a52:	fa 8a       	std	Y+18, r15	; 0x12
    1a54:	0b 8b       	std	Y+19, r16	; 0x13
    1a56:	1c 8b       	std	Y+20, r17	; 0x14
	qc = q2;
    1a58:	e0 90 33 01 	lds	r14, 0x0133
    1a5c:	f0 90 34 01 	lds	r15, 0x0134
    1a60:	00 91 35 01 	lds	r16, 0x0135
    1a64:	10 91 36 01 	lds	r17, 0x0136
    1a68:	ed 8a       	std	Y+21, r14	; 0x15
    1a6a:	fe 8a       	std	Y+22, r15	; 0x16
    1a6c:	0f 8b       	std	Y+23, r16	; 0x17
    1a6e:	18 8f       	std	Y+24, r17	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    1a70:	40 90 2f 01 	lds	r4, 0x012F
    1a74:	50 90 30 01 	lds	r5, 0x0130
    1a78:	60 90 31 01 	lds	r6, 0x0131
    1a7c:	70 90 32 01 	lds	r7, 0x0132
    1a80:	c0 90 77 00 	lds	r12, 0x0077
    1a84:	d0 90 78 00 	lds	r13, 0x0078
    1a88:	e0 90 79 00 	lds	r14, 0x0079
    1a8c:	f0 90 7a 00 	lds	r15, 0x007A
    1a90:	69 89       	ldd	r22, Y+17	; 0x11
    1a92:	7a 89       	ldd	r23, Y+18	; 0x12
    1a94:	8b 89       	ldd	r24, Y+19	; 0x13
    1a96:	9c 89       	ldd	r25, Y+20	; 0x14
    1a98:	90 58       	subi	r25, 0x80	; 128
    1a9a:	29 81       	ldd	r18, Y+1	; 0x01
    1a9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a9e:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa0:	5c 81       	ldd	r21, Y+4	; 0x04
    1aa2:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1aa6:	4b 01       	movw	r8, r22
    1aa8:	5c 01       	movw	r10, r24
    1aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1aac:	3e 81       	ldd	r19, Y+6	; 0x06
    1aae:	4f 81       	ldd	r20, Y+7	; 0x07
    1ab0:	58 85       	ldd	r21, Y+8	; 0x08
    1ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aba:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	c5 01       	movw	r24, r10
    1ac4:	b4 01       	movw	r22, r8
    1ac6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1aca:	4b 01       	movw	r8, r22
    1acc:	5c 01       	movw	r10, r24
    1ace:	29 85       	ldd	r18, Y+9	; 0x09
    1ad0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ad2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ad4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ad6:	c3 01       	movw	r24, r6
    1ad8:	b2 01       	movw	r22, r4
    1ada:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	c5 01       	movw	r24, r10
    1ae4:	b4 01       	movw	r22, r8
    1ae6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1aea:	a7 01       	movw	r20, r14
    1aec:	96 01       	movw	r18, r12
    1aee:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1af2:	60 93 77 00 	sts	0x0077, r22
    1af6:	70 93 78 00 	sts	0x0078, r23
    1afa:	80 93 79 00 	sts	0x0079, r24
    1afe:	90 93 7a 00 	sts	0x007A, r25
	q1 += (qa * gx + qc * gz - q3 * gy);
    1b02:	40 90 2f 01 	lds	r4, 0x012F
    1b06:	50 90 30 01 	lds	r5, 0x0130
    1b0a:	60 90 31 01 	lds	r6, 0x0131
    1b0e:	70 90 32 01 	lds	r7, 0x0132
    1b12:	c0 90 37 01 	lds	r12, 0x0137
    1b16:	d0 90 38 01 	lds	r13, 0x0138
    1b1a:	e0 90 39 01 	lds	r14, 0x0139
    1b1e:	f0 90 3a 01 	lds	r15, 0x013A
    1b22:	29 81       	ldd	r18, Y+1	; 0x01
    1b24:	3a 81       	ldd	r19, Y+2	; 0x02
    1b26:	4b 81       	ldd	r20, Y+3	; 0x03
    1b28:	5c 81       	ldd	r21, Y+4	; 0x04
    1b2a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b2c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1b36:	4b 01       	movw	r8, r22
    1b38:	5c 01       	movw	r10, r24
    1b3a:	29 85       	ldd	r18, Y+9	; 0x09
    1b3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b3e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b40:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	c5 01       	movw	r24, r10
    1b54:	b4 01       	movw	r22, r8
    1b56:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1b5a:	4b 01       	movw	r8, r22
    1b5c:	5c 01       	movw	r10, r24
    1b5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b60:	3e 81       	ldd	r19, Y+6	; 0x06
    1b62:	4f 81       	ldd	r20, Y+7	; 0x07
    1b64:	58 85       	ldd	r21, Y+8	; 0x08
    1b66:	c3 01       	movw	r24, r6
    1b68:	b2 01       	movw	r22, r4
    1b6a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	c5 01       	movw	r24, r10
    1b74:	b4 01       	movw	r22, r8
    1b76:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1b7a:	a7 01       	movw	r20, r14
    1b7c:	96 01       	movw	r18, r12
    1b7e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1b82:	60 93 37 01 	sts	0x0137, r22
    1b86:	70 93 38 01 	sts	0x0138, r23
    1b8a:	80 93 39 01 	sts	0x0139, r24
    1b8e:	90 93 3a 01 	sts	0x013A, r25
	q2 += (qa * gy - qb * gz + q3 * gx);
    1b92:	40 90 2f 01 	lds	r4, 0x012F
    1b96:	50 90 30 01 	lds	r5, 0x0130
    1b9a:	60 90 31 01 	lds	r6, 0x0131
    1b9e:	70 90 32 01 	lds	r7, 0x0132
    1ba2:	c0 90 33 01 	lds	r12, 0x0133
    1ba6:	d0 90 34 01 	lds	r13, 0x0134
    1baa:	e0 90 35 01 	lds	r14, 0x0135
    1bae:	f0 90 36 01 	lds	r15, 0x0136
    1bb2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb4:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb6:	4f 81       	ldd	r20, Y+7	; 0x07
    1bb8:	58 85       	ldd	r21, Y+8	; 0x08
    1bba:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bbc:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc0:	98 89       	ldd	r25, Y+16	; 0x10
    1bc2:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1bc6:	4b 01       	movw	r8, r22
    1bc8:	5c 01       	movw	r10, r24
    1bca:	29 85       	ldd	r18, Y+9	; 0x09
    1bcc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bce:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bd0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bd2:	69 89       	ldd	r22, Y+17	; 0x11
    1bd4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bda:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1bde:	9b 01       	movw	r18, r22
    1be0:	ac 01       	movw	r20, r24
    1be2:	c5 01       	movw	r24, r10
    1be4:	b4 01       	movw	r22, r8
    1be6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1bea:	4b 01       	movw	r8, r22
    1bec:	5c 01       	movw	r10, r24
    1bee:	29 81       	ldd	r18, Y+1	; 0x01
    1bf0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf2:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf4:	5c 81       	ldd	r21, Y+4	; 0x04
    1bf6:	c3 01       	movw	r24, r6
    1bf8:	b2 01       	movw	r22, r4
    1bfa:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1bfe:	9b 01       	movw	r18, r22
    1c00:	ac 01       	movw	r20, r24
    1c02:	c5 01       	movw	r24, r10
    1c04:	b4 01       	movw	r22, r8
    1c06:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1c0a:	a7 01       	movw	r20, r14
    1c0c:	96 01       	movw	r18, r12
    1c0e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1c12:	60 93 33 01 	sts	0x0133, r22
    1c16:	70 93 34 01 	sts	0x0134, r23
    1c1a:	80 93 35 01 	sts	0x0135, r24
    1c1e:	90 93 36 01 	sts	0x0136, r25
	q3 += (qa * gz + qb * gy - qc * gx);
    1c22:	c0 90 2f 01 	lds	r12, 0x012F
    1c26:	d0 90 30 01 	lds	r13, 0x0130
    1c2a:	e0 90 31 01 	lds	r14, 0x0131
    1c2e:	f0 90 32 01 	lds	r15, 0x0132
    1c32:	29 85       	ldd	r18, Y+9	; 0x09
    1c34:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c36:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c38:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c40:	98 89       	ldd	r25, Y+16	; 0x10
    1c42:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1c46:	4b 01       	movw	r8, r22
    1c48:	5c 01       	movw	r10, r24
    1c4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4e:	4f 81       	ldd	r20, Y+7	; 0x07
    1c50:	58 85       	ldd	r21, Y+8	; 0x08
    1c52:	69 89       	ldd	r22, Y+17	; 0x11
    1c54:	7a 89       	ldd	r23, Y+18	; 0x12
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1c5e:	9b 01       	movw	r18, r22
    1c60:	ac 01       	movw	r20, r24
    1c62:	c5 01       	movw	r24, r10
    1c64:	b4 01       	movw	r22, r8
    1c66:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1c6a:	4b 01       	movw	r8, r22
    1c6c:	5c 01       	movw	r10, r24
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	3a 81       	ldd	r19, Y+2	; 0x02
    1c72:	4b 81       	ldd	r20, Y+3	; 0x03
    1c74:	5c 81       	ldd	r21, Y+4	; 0x04
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1c82:	9b 01       	movw	r18, r22
    1c84:	ac 01       	movw	r20, r24
    1c86:	c5 01       	movw	r24, r10
    1c88:	b4 01       	movw	r22, r8
    1c8a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__subsf3>
    1c8e:	a7 01       	movw	r20, r14
    1c90:	96 01       	movw	r18, r12
    1c92:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1c96:	60 93 2f 01 	sts	0x012F, r22
    1c9a:	70 93 30 01 	sts	0x0130, r23
    1c9e:	80 93 31 01 	sts	0x0131, r24
    1ca2:	90 93 32 01 	sts	0x0132, r25

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1ca6:	60 91 77 00 	lds	r22, 0x0077
    1caa:	70 91 78 00 	lds	r23, 0x0078
    1cae:	80 91 79 00 	lds	r24, 0x0079
    1cb2:	90 91 7a 00 	lds	r25, 0x007A
    1cb6:	20 91 77 00 	lds	r18, 0x0077
    1cba:	30 91 78 00 	lds	r19, 0x0078
    1cbe:	40 91 79 00 	lds	r20, 0x0079
    1cc2:	50 91 7a 00 	lds	r21, 0x007A
    1cc6:	80 90 37 01 	lds	r8, 0x0137
    1cca:	90 90 38 01 	lds	r9, 0x0138
    1cce:	a0 90 39 01 	lds	r10, 0x0139
    1cd2:	b0 90 3a 01 	lds	r11, 0x013A
    1cd6:	40 90 37 01 	lds	r4, 0x0137
    1cda:	50 90 38 01 	lds	r5, 0x0138
    1cde:	60 90 39 01 	lds	r6, 0x0139
    1ce2:	70 90 3a 01 	lds	r7, 0x013A
    1ce6:	e0 90 33 01 	lds	r14, 0x0133
    1cea:	f0 90 34 01 	lds	r15, 0x0134
    1cee:	00 91 35 01 	lds	r16, 0x0135
    1cf2:	10 91 36 01 	lds	r17, 0x0136
    1cf6:	e9 82       	std	Y+1, r14	; 0x01
    1cf8:	fa 82       	std	Y+2, r15	; 0x02
    1cfa:	0b 83       	std	Y+3, r16	; 0x03
    1cfc:	1c 83       	std	Y+4, r17	; 0x04
    1cfe:	e0 90 33 01 	lds	r14, 0x0133
    1d02:	f0 90 34 01 	lds	r15, 0x0134
    1d06:	00 91 35 01 	lds	r16, 0x0135
    1d0a:	10 91 36 01 	lds	r17, 0x0136
    1d0e:	ed 82       	std	Y+5, r14	; 0x05
    1d10:	fe 82       	std	Y+6, r15	; 0x06
    1d12:	0f 83       	std	Y+7, r16	; 0x07
    1d14:	18 87       	std	Y+8, r17	; 0x08
    1d16:	e0 90 2f 01 	lds	r14, 0x012F
    1d1a:	f0 90 30 01 	lds	r15, 0x0130
    1d1e:	00 91 31 01 	lds	r16, 0x0131
    1d22:	10 91 32 01 	lds	r17, 0x0132
    1d26:	e9 86       	std	Y+9, r14	; 0x09
    1d28:	fa 86       	std	Y+10, r15	; 0x0a
    1d2a:	0b 87       	std	Y+11, r16	; 0x0b
    1d2c:	1c 87       	std	Y+12, r17	; 0x0c
    1d2e:	e0 90 2f 01 	lds	r14, 0x012F
    1d32:	f0 90 30 01 	lds	r15, 0x0130
    1d36:	00 91 31 01 	lds	r16, 0x0131
    1d3a:	10 91 32 01 	lds	r17, 0x0132
    1d3e:	ed 86       	std	Y+13, r14	; 0x0d
    1d40:	fe 86       	std	Y+14, r15	; 0x0e
    1d42:	0f 87       	std	Y+15, r16	; 0x0f
    1d44:	18 8b       	std	Y+16, r17	; 0x10
    1d46:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1d4a:	6b 01       	movw	r12, r22
    1d4c:	7c 01       	movw	r14, r24
    1d4e:	a3 01       	movw	r20, r6
    1d50:	92 01       	movw	r18, r4
    1d52:	c5 01       	movw	r24, r10
    1d54:	b4 01       	movw	r22, r8
    1d56:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1d5a:	9b 01       	movw	r18, r22
    1d5c:	ac 01       	movw	r20, r24
    1d5e:	c7 01       	movw	r24, r14
    1d60:	b6 01       	movw	r22, r12
    1d62:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
    1d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d70:	58 85       	ldd	r21, Y+8	; 0x08
    1d72:	69 81       	ldd	r22, Y+1	; 0x01
    1d74:	7a 81       	ldd	r23, Y+2	; 0x02
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1d7e:	9b 01       	movw	r18, r22
    1d80:	ac 01       	movw	r20, r24
    1d82:	c7 01       	movw	r24, r14
    1d84:	b6 01       	movw	r22, r12
    1d86:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1d8a:	6b 01       	movw	r12, r22
    1d8c:	7c 01       	movw	r14, r24
    1d8e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d90:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d92:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d94:	58 89       	ldd	r21, Y+16	; 0x10
    1d96:	69 85       	ldd	r22, Y+9	; 0x09
    1d98:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d9e:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	c7 01       	movw	r24, r14
    1da8:	b6 01       	movw	r22, r12
    1daa:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__addsf3>
    1dae:	0e 94 42 12 	call	0x2484	; 0x2484 <sqrt>
    1db2:	6b 01       	movw	r12, r22
    1db4:	7c 01       	movw	r14, r24
	q0 /= norm;
    1db6:	60 91 77 00 	lds	r22, 0x0077
    1dba:	70 91 78 00 	lds	r23, 0x0078
    1dbe:	80 91 79 00 	lds	r24, 0x0079
    1dc2:	90 91 7a 00 	lds	r25, 0x007A
    1dc6:	a7 01       	movw	r20, r14
    1dc8:	96 01       	movw	r18, r12
    1dca:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1dce:	60 93 77 00 	sts	0x0077, r22
    1dd2:	70 93 78 00 	sts	0x0078, r23
    1dd6:	80 93 79 00 	sts	0x0079, r24
    1dda:	90 93 7a 00 	sts	0x007A, r25
	q1 /= norm;
    1dde:	60 91 37 01 	lds	r22, 0x0137
    1de2:	70 91 38 01 	lds	r23, 0x0138
    1de6:	80 91 39 01 	lds	r24, 0x0139
    1dea:	90 91 3a 01 	lds	r25, 0x013A
    1dee:	a7 01       	movw	r20, r14
    1df0:	96 01       	movw	r18, r12
    1df2:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1df6:	60 93 37 01 	sts	0x0137, r22
    1dfa:	70 93 38 01 	sts	0x0138, r23
    1dfe:	80 93 39 01 	sts	0x0139, r24
    1e02:	90 93 3a 01 	sts	0x013A, r25
	q2 /= norm;
    1e06:	60 91 33 01 	lds	r22, 0x0133
    1e0a:	70 91 34 01 	lds	r23, 0x0134
    1e0e:	80 91 35 01 	lds	r24, 0x0135
    1e12:	90 91 36 01 	lds	r25, 0x0136
    1e16:	a7 01       	movw	r20, r14
    1e18:	96 01       	movw	r18, r12
    1e1a:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1e1e:	60 93 33 01 	sts	0x0133, r22
    1e22:	70 93 34 01 	sts	0x0134, r23
    1e26:	80 93 35 01 	sts	0x0135, r24
    1e2a:	90 93 36 01 	sts	0x0136, r25
	q3 /= norm;
    1e2e:	60 91 2f 01 	lds	r22, 0x012F
    1e32:	70 91 30 01 	lds	r23, 0x0130
    1e36:	80 91 31 01 	lds	r24, 0x0131
    1e3a:	90 91 32 01 	lds	r25, 0x0132
    1e3e:	a7 01       	movw	r20, r14
    1e40:	96 01       	movw	r18, r12
    1e42:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1e46:	60 93 2f 01 	sts	0x012F, r22
    1e4a:	70 93 30 01 	sts	0x0130, r23
    1e4e:	80 93 31 01 	sts	0x0131, r24
    1e52:	90 93 32 01 	sts	0x0132, r25
}
    1e56:	a4 96       	adiw	r28, 0x24	; 36
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	cf 90       	pop	r12
    1e72:	bf 90       	pop	r11
    1e74:	af 90       	pop	r10
    1e76:	9f 90       	pop	r9
    1e78:	8f 90       	pop	r8
    1e7a:	7f 90       	pop	r7
    1e7c:	6f 90       	pop	r6
    1e7e:	5f 90       	pop	r5
    1e80:	4f 90       	pop	r4
    1e82:	08 95       	ret

00001e84 <mpu6050_updateQuaternion>:

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    1e84:	4f 92       	push	r4
    1e86:	5f 92       	push	r5
    1e88:	6f 92       	push	r6
    1e8a:	7f 92       	push	r7
    1e8c:	8f 92       	push	r8
    1e8e:	9f 92       	push	r9
    1e90:	af 92       	push	r10
    1e92:	bf 92       	push	r11
    1e94:	cf 92       	push	r12
    1e96:	df 92       	push	r13
    1e98:	ef 92       	push	r14
    1e9a:	ff 92       	push	r15
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	28 97       	sbiw	r28, 0x08	; 8
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    1eb4:	4d e3       	ldi	r20, 0x3D	; 61
    1eb6:	51 e0       	ldi	r21, 0x01	; 1
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	8a e3       	ldi	r24, 0x3A	; 58
    1ebc:	0e 94 75 09 	call	0x12ea	; 0x12ea <mpu6050_readBit>
		if(buffer[0])
    1ec0:	80 91 3d 01 	lds	r24, 0x013D
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <mpu6050_updateQuaternion+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ec8:	83 e0       	ldi	r24, 0x03	; 3
    1eca:	8a 95       	dec	r24
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <mpu6050_updateQuaternion+0x46>
    1ece:	00 00       	nop
    1ed0:	f1 cf       	rjmp	.-30     	; 0x1eb4 <mpu6050_updateQuaternion+0x30>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    1ed2:	4d e3       	ldi	r20, 0x3D	; 61
    1ed4:	51 e0       	ldi	r21, 0x01	; 1
    1ed6:	6e e0       	ldi	r22, 0x0E	; 14
    1ed8:	8b e3       	ldi	r24, 0x3B	; 59
    1eda:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    1ede:	80 91 3d 01 	lds	r24, 0x013D
    1ee2:	60 91 3e 01 	lds	r22, 0x013E
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1ee6:	00 91 3f 01 	lds	r16, 0x013F
    1eea:	90 90 40 01 	lds	r9, 0x0140
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1eee:	80 90 41 01 	lds	r8, 0x0141
    1ef2:	10 91 42 01 	lds	r17, 0x0142
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1ef6:	70 90 45 01 	lds	r7, 0x0145
    1efa:	60 90 46 01 	lds	r6, 0x0146
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1efe:	50 90 47 01 	lds	r5, 0x0147
    1f02:	40 90 48 01 	lds	r4, 0x0148
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1f06:	f0 90 49 01 	lds	r15, 0x0149
    1f0a:	e0 90 4a 01 	lds	r14, 0x014A
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	78 2b       	or	r23, r24
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    1f12:	88 27       	eor	r24, r24
    1f14:	77 fd       	sbrc	r23, 7
    1f16:	80 95       	com	r24
    1f18:	98 2f       	mov	r25, r24
    1f1a:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	58 e3       	ldi	r21, 0x38	; 56
    1f26:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1f2a:	5b 01       	movw	r10, r22
    1f2c:	6c 01       	movw	r12, r24
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1f2e:	6e 2d       	mov	r22, r14
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	7f 29       	or	r23, r15
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
	gxrs = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN*0.01745329; //degree to radians
	gyrs = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN*0.01745329; //degree to radians
    1f34:	63 5e       	subi	r22, 0xE3	; 227
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	88 27       	eor	r24, r24
    1f3a:	77 fd       	sbrc	r23, 7
    1f3c:	80 95       	com	r24
    1f3e:	98 2f       	mov	r25, r24
    1f40:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    1f44:	23 e3       	ldi	r18, 0x33	; 51
    1f46:	33 e3       	ldi	r19, 0x33	; 51
    1f48:	43 e8       	ldi	r20, 0x83	; 131
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1f50:	24 e3       	ldi	r18, 0x34	; 52
    1f52:	3a ef       	ldi	r19, 0xFA	; 250
    1f54:	4e e8       	ldi	r20, 0x8E	; 142
    1f56:	5c e3       	ldi	r21, 0x3C	; 60
    1f58:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1f5c:	69 83       	std	Y+1, r22	; 0x01
    1f5e:	7a 83       	std	Y+2, r23	; 0x02
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	9c 83       	std	Y+4, r25	; 0x04
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1f64:	64 2d       	mov	r22, r4
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	75 29       	or	r23, r5
	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
	gxrs = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN*0.01745329; //degree to radians
	gyrs = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN*0.01745329; //degree to radians
    1f6a:	69 50       	subi	r22, 0x09	; 9
    1f6c:	71 09       	sbc	r23, r1
    1f6e:	88 27       	eor	r24, r24
    1f70:	77 fd       	sbrc	r23, 7
    1f72:	80 95       	com	r24
    1f74:	98 2f       	mov	r25, r24
    1f76:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    1f7a:	23 e3       	ldi	r18, 0x33	; 51
    1f7c:	33 e3       	ldi	r19, 0x33	; 51
    1f7e:	43 e8       	ldi	r20, 0x83	; 131
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1f86:	24 e3       	ldi	r18, 0x34	; 52
    1f88:	3a ef       	ldi	r19, 0xFA	; 250
    1f8a:	4e e8       	ldi	r20, 0x8E	; 142
    1f8c:	5c e3       	ldi	r21, 0x3C	; 60
    1f8e:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1f92:	6d 83       	std	Y+5, r22	; 0x05
    1f94:	7e 83       	std	Y+6, r23	; 0x06
    1f96:	8f 83       	std	Y+7, r24	; 0x07
    1f98:	98 87       	std	Y+8, r25	; 0x08

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1f9a:	66 2d       	mov	r22, r6
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	77 29       	or	r23, r7

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
	gxrs = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN*0.01745329; //degree to radians
    1fa0:	66 5d       	subi	r22, 0xD6	; 214
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	88 27       	eor	r24, r24
    1fa6:	77 fd       	sbrc	r23, 7
    1fa8:	80 95       	com	r24
    1faa:	98 2f       	mov	r25, r24
    1fac:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    1fb0:	23 e3       	ldi	r18, 0x33	; 51
    1fb2:	33 e3       	ldi	r19, 0x33	; 51
    1fb4:	43 e8       	ldi	r20, 0x83	; 131
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divsf3>
    1fbc:	24 e3       	ldi	r18, 0x34	; 52
    1fbe:	3a ef       	ldi	r19, 0xFA	; 250
    1fc0:	4e e8       	ldi	r20, 0x8E	; 142
    1fc2:	5c e3       	ldi	r21, 0x3C	; 60
    1fc4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1fc8:	2b 01       	movw	r4, r22
    1fca:	3c 01       	movw	r6, r24
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1fcc:	61 2f       	mov	r22, r17
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	78 29       	or	r23, r8
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    1fd2:	88 27       	eor	r24, r24
    1fd4:	77 fd       	sbrc	r23, 7
    1fd6:	80 95       	com	r24
    1fd8:	98 2f       	mov	r25, r24
    1fda:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	58 e3       	ldi	r21, 0x38	; 56
    1fe6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    1fea:	9f 93       	push	r25
    1fec:	8f 93       	push	r24
    1fee:	7f 93       	push	r23
    1ff0:	6f 93       	push	r22
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1ff2:	69 2d       	mov	r22, r9
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	70 2b       	or	r23, r16
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    1ff8:	88 27       	eor	r24, r24
    1ffa:	77 fd       	sbrc	r23, 7
    1ffc:	80 95       	com	r24
    1ffe:	98 2f       	mov	r25, r24
    2000:	0e 94 2b 11 	call	0x2256	; 0x2256 <__floatsisf>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	58 e3       	ldi	r21, 0x38	; 56
    200c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    2010:	9f 93       	push	r25
    2012:	8f 93       	push	r24
    2014:	7f 93       	push	r23
    2016:	6f 93       	push	r22
    2018:	e9 80       	ldd	r14, Y+1	; 0x01
    201a:	fa 80       	ldd	r15, Y+2	; 0x02
    201c:	0b 81       	ldd	r16, Y+3	; 0x03
    201e:	1c 81       	ldd	r17, Y+4	; 0x04
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	4f 81       	ldd	r20, Y+7	; 0x07
    2026:	58 85       	ldd	r21, Y+8	; 0x08
    2028:	c3 01       	movw	r24, r6
    202a:	b2 01       	movw	r22, r4
    202c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <mpu6050_mahonyUpdate>
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
}
    203a:	28 96       	adiw	r28, 0x08	; 8
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	af 90       	pop	r10
    205a:	9f 90       	pop	r9
    205c:	8f 90       	pop	r8
    205e:	7f 90       	pop	r7
    2060:	6f 90       	pop	r6
    2062:	5f 90       	pop	r5
    2064:	4f 90       	pop	r4
    2066:	08 95       	ret

00002068 <__vector_11>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    208a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <mpu6050_updateQuaternion>
}
    208e:	ff 91       	pop	r31
    2090:	ef 91       	pop	r30
    2092:	bf 91       	pop	r27
    2094:	af 91       	pop	r26
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	7f 91       	pop	r23
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <__subsf3>:
    20b0:	50 58       	subi	r21, 0x80	; 128

000020b2 <__addsf3>:
    20b2:	bb 27       	eor	r27, r27
    20b4:	aa 27       	eor	r26, r26
    20b6:	0e d0       	rcall	.+28     	; 0x20d4 <__addsf3x>
    20b8:	44 c1       	rjmp	.+648    	; 0x2342 <__fp_round>
    20ba:	35 d1       	rcall	.+618    	; 0x2326 <__fp_pscA>
    20bc:	30 f0       	brcs	.+12     	; 0x20ca <__addsf3+0x18>
    20be:	3a d1       	rcall	.+628    	; 0x2334 <__fp_pscB>
    20c0:	20 f0       	brcs	.+8      	; 0x20ca <__addsf3+0x18>
    20c2:	31 f4       	brne	.+12     	; 0x20d0 <__addsf3+0x1e>
    20c4:	9f 3f       	cpi	r25, 0xFF	; 255
    20c6:	11 f4       	brne	.+4      	; 0x20cc <__addsf3+0x1a>
    20c8:	1e f4       	brtc	.+6      	; 0x20d0 <__addsf3+0x1e>
    20ca:	2a c1       	rjmp	.+596    	; 0x2320 <__fp_nan>
    20cc:	0e f4       	brtc	.+2      	; 0x20d0 <__addsf3+0x1e>
    20ce:	e0 95       	com	r30
    20d0:	e7 fb       	bst	r30, 7
    20d2:	20 c1       	rjmp	.+576    	; 0x2314 <__fp_inf>

000020d4 <__addsf3x>:
    20d4:	e9 2f       	mov	r30, r25
    20d6:	46 d1       	rcall	.+652    	; 0x2364 <__fp_split3>
    20d8:	80 f3       	brcs	.-32     	; 0x20ba <__addsf3+0x8>
    20da:	ba 17       	cp	r27, r26
    20dc:	62 07       	cpc	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	84 07       	cpc	r24, r20
    20e2:	95 07       	cpc	r25, r21
    20e4:	18 f0       	brcs	.+6      	; 0x20ec <__addsf3x+0x18>
    20e6:	71 f4       	brne	.+28     	; 0x2104 <__addsf3x+0x30>
    20e8:	9e f5       	brtc	.+102    	; 0x2150 <__addsf3x+0x7c>
    20ea:	5e c1       	rjmp	.+700    	; 0x23a8 <__fp_zero>
    20ec:	0e f4       	brtc	.+2      	; 0x20f0 <__addsf3x+0x1c>
    20ee:	e0 95       	com	r30
    20f0:	0b 2e       	mov	r0, r27
    20f2:	ba 2f       	mov	r27, r26
    20f4:	a0 2d       	mov	r26, r0
    20f6:	0b 01       	movw	r0, r22
    20f8:	b9 01       	movw	r22, r18
    20fa:	90 01       	movw	r18, r0
    20fc:	0c 01       	movw	r0, r24
    20fe:	ca 01       	movw	r24, r20
    2100:	a0 01       	movw	r20, r0
    2102:	11 24       	eor	r1, r1
    2104:	ff 27       	eor	r31, r31
    2106:	59 1b       	sub	r21, r25
    2108:	99 f0       	breq	.+38     	; 0x2130 <__addsf3x+0x5c>
    210a:	59 3f       	cpi	r21, 0xF9	; 249
    210c:	50 f4       	brcc	.+20     	; 0x2122 <__addsf3x+0x4e>
    210e:	50 3e       	cpi	r21, 0xE0	; 224
    2110:	68 f1       	brcs	.+90     	; 0x216c <__addsf3x+0x98>
    2112:	1a 16       	cp	r1, r26
    2114:	f0 40       	sbci	r31, 0x00	; 0
    2116:	a2 2f       	mov	r26, r18
    2118:	23 2f       	mov	r18, r19
    211a:	34 2f       	mov	r19, r20
    211c:	44 27       	eor	r20, r20
    211e:	58 5f       	subi	r21, 0xF8	; 248
    2120:	f3 cf       	rjmp	.-26     	; 0x2108 <__addsf3x+0x34>
    2122:	46 95       	lsr	r20
    2124:	37 95       	ror	r19
    2126:	27 95       	ror	r18
    2128:	a7 95       	ror	r26
    212a:	f0 40       	sbci	r31, 0x00	; 0
    212c:	53 95       	inc	r21
    212e:	c9 f7       	brne	.-14     	; 0x2122 <__addsf3x+0x4e>
    2130:	7e f4       	brtc	.+30     	; 0x2150 <__addsf3x+0x7c>
    2132:	1f 16       	cp	r1, r31
    2134:	ba 0b       	sbc	r27, r26
    2136:	62 0b       	sbc	r22, r18
    2138:	73 0b       	sbc	r23, r19
    213a:	84 0b       	sbc	r24, r20
    213c:	ba f0       	brmi	.+46     	; 0x216c <__addsf3x+0x98>
    213e:	91 50       	subi	r25, 0x01	; 1
    2140:	a1 f0       	breq	.+40     	; 0x216a <__addsf3x+0x96>
    2142:	ff 0f       	add	r31, r31
    2144:	bb 1f       	adc	r27, r27
    2146:	66 1f       	adc	r22, r22
    2148:	77 1f       	adc	r23, r23
    214a:	88 1f       	adc	r24, r24
    214c:	c2 f7       	brpl	.-16     	; 0x213e <__addsf3x+0x6a>
    214e:	0e c0       	rjmp	.+28     	; 0x216c <__addsf3x+0x98>
    2150:	ba 0f       	add	r27, r26
    2152:	62 1f       	adc	r22, r18
    2154:	73 1f       	adc	r23, r19
    2156:	84 1f       	adc	r24, r20
    2158:	48 f4       	brcc	.+18     	; 0x216c <__addsf3x+0x98>
    215a:	87 95       	ror	r24
    215c:	77 95       	ror	r23
    215e:	67 95       	ror	r22
    2160:	b7 95       	ror	r27
    2162:	f7 95       	ror	r31
    2164:	9e 3f       	cpi	r25, 0xFE	; 254
    2166:	08 f0       	brcs	.+2      	; 0x216a <__addsf3x+0x96>
    2168:	b3 cf       	rjmp	.-154    	; 0x20d0 <__addsf3+0x1e>
    216a:	93 95       	inc	r25
    216c:	88 0f       	add	r24, r24
    216e:	08 f0       	brcs	.+2      	; 0x2172 <__addsf3x+0x9e>
    2170:	99 27       	eor	r25, r25
    2172:	ee 0f       	add	r30, r30
    2174:	97 95       	ror	r25
    2176:	87 95       	ror	r24
    2178:	08 95       	ret

0000217a <__cmpsf2>:
    217a:	a8 d0       	rcall	.+336    	; 0x22cc <__fp_cmp>
    217c:	08 f4       	brcc	.+2      	; 0x2180 <__cmpsf2+0x6>
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	08 95       	ret

00002182 <__divsf3>:
    2182:	0c d0       	rcall	.+24     	; 0x219c <__divsf3x>
    2184:	de c0       	rjmp	.+444    	; 0x2342 <__fp_round>
    2186:	d6 d0       	rcall	.+428    	; 0x2334 <__fp_pscB>
    2188:	40 f0       	brcs	.+16     	; 0x219a <__divsf3+0x18>
    218a:	cd d0       	rcall	.+410    	; 0x2326 <__fp_pscA>
    218c:	30 f0       	brcs	.+12     	; 0x219a <__divsf3+0x18>
    218e:	21 f4       	brne	.+8      	; 0x2198 <__divsf3+0x16>
    2190:	5f 3f       	cpi	r21, 0xFF	; 255
    2192:	19 f0       	breq	.+6      	; 0x219a <__divsf3+0x18>
    2194:	bf c0       	rjmp	.+382    	; 0x2314 <__fp_inf>
    2196:	51 11       	cpse	r21, r1
    2198:	08 c1       	rjmp	.+528    	; 0x23aa <__fp_szero>
    219a:	c2 c0       	rjmp	.+388    	; 0x2320 <__fp_nan>

0000219c <__divsf3x>:
    219c:	e3 d0       	rcall	.+454    	; 0x2364 <__fp_split3>
    219e:	98 f3       	brcs	.-26     	; 0x2186 <__divsf3+0x4>

000021a0 <__divsf3_pse>:
    21a0:	99 23       	and	r25, r25
    21a2:	c9 f3       	breq	.-14     	; 0x2196 <__divsf3+0x14>
    21a4:	55 23       	and	r21, r21
    21a6:	b1 f3       	breq	.-20     	; 0x2194 <__divsf3+0x12>
    21a8:	95 1b       	sub	r25, r21
    21aa:	55 0b       	sbc	r21, r21
    21ac:	bb 27       	eor	r27, r27
    21ae:	aa 27       	eor	r26, r26
    21b0:	62 17       	cp	r22, r18
    21b2:	73 07       	cpc	r23, r19
    21b4:	84 07       	cpc	r24, r20
    21b6:	38 f0       	brcs	.+14     	; 0x21c6 <__divsf3_pse+0x26>
    21b8:	9f 5f       	subi	r25, 0xFF	; 255
    21ba:	5f 4f       	sbci	r21, 0xFF	; 255
    21bc:	22 0f       	add	r18, r18
    21be:	33 1f       	adc	r19, r19
    21c0:	44 1f       	adc	r20, r20
    21c2:	aa 1f       	adc	r26, r26
    21c4:	a9 f3       	breq	.-22     	; 0x21b0 <__divsf3_pse+0x10>
    21c6:	33 d0       	rcall	.+102    	; 0x222e <__divsf3_pse+0x8e>
    21c8:	0e 2e       	mov	r0, r30
    21ca:	3a f0       	brmi	.+14     	; 0x21da <__divsf3_pse+0x3a>
    21cc:	e0 e8       	ldi	r30, 0x80	; 128
    21ce:	30 d0       	rcall	.+96     	; 0x2230 <__divsf3_pse+0x90>
    21d0:	91 50       	subi	r25, 0x01	; 1
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	e6 95       	lsr	r30
    21d6:	00 1c       	adc	r0, r0
    21d8:	ca f7       	brpl	.-14     	; 0x21cc <__divsf3_pse+0x2c>
    21da:	29 d0       	rcall	.+82     	; 0x222e <__divsf3_pse+0x8e>
    21dc:	fe 2f       	mov	r31, r30
    21de:	27 d0       	rcall	.+78     	; 0x222e <__divsf3_pse+0x8e>
    21e0:	66 0f       	add	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	88 1f       	adc	r24, r24
    21e6:	bb 1f       	adc	r27, r27
    21e8:	26 17       	cp	r18, r22
    21ea:	37 07       	cpc	r19, r23
    21ec:	48 07       	cpc	r20, r24
    21ee:	ab 07       	cpc	r26, r27
    21f0:	b0 e8       	ldi	r27, 0x80	; 128
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <__divsf3_pse+0x56>
    21f4:	bb 0b       	sbc	r27, r27
    21f6:	80 2d       	mov	r24, r0
    21f8:	bf 01       	movw	r22, r30
    21fa:	ff 27       	eor	r31, r31
    21fc:	93 58       	subi	r25, 0x83	; 131
    21fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2200:	2a f0       	brmi	.+10     	; 0x220c <__divsf3_pse+0x6c>
    2202:	9e 3f       	cpi	r25, 0xFE	; 254
    2204:	51 05       	cpc	r21, r1
    2206:	68 f0       	brcs	.+26     	; 0x2222 <__divsf3_pse+0x82>
    2208:	85 c0       	rjmp	.+266    	; 0x2314 <__fp_inf>
    220a:	cf c0       	rjmp	.+414    	; 0x23aa <__fp_szero>
    220c:	5f 3f       	cpi	r21, 0xFF	; 255
    220e:	ec f3       	brlt	.-6      	; 0x220a <__divsf3_pse+0x6a>
    2210:	98 3e       	cpi	r25, 0xE8	; 232
    2212:	dc f3       	brlt	.-10     	; 0x220a <__divsf3_pse+0x6a>
    2214:	86 95       	lsr	r24
    2216:	77 95       	ror	r23
    2218:	67 95       	ror	r22
    221a:	b7 95       	ror	r27
    221c:	f7 95       	ror	r31
    221e:	9f 5f       	subi	r25, 0xFF	; 255
    2220:	c9 f7       	brne	.-14     	; 0x2214 <__divsf3_pse+0x74>
    2222:	88 0f       	add	r24, r24
    2224:	91 1d       	adc	r25, r1
    2226:	96 95       	lsr	r25
    2228:	87 95       	ror	r24
    222a:	97 f9       	bld	r25, 7
    222c:	08 95       	ret
    222e:	e1 e0       	ldi	r30, 0x01	; 1
    2230:	66 0f       	add	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	bb 1f       	adc	r27, r27
    2238:	62 17       	cp	r22, r18
    223a:	73 07       	cpc	r23, r19
    223c:	84 07       	cpc	r24, r20
    223e:	ba 07       	cpc	r27, r26
    2240:	20 f0       	brcs	.+8      	; 0x224a <__divsf3_pse+0xaa>
    2242:	62 1b       	sub	r22, r18
    2244:	73 0b       	sbc	r23, r19
    2246:	84 0b       	sbc	r24, r20
    2248:	ba 0b       	sbc	r27, r26
    224a:	ee 1f       	adc	r30, r30
    224c:	88 f7       	brcc	.-30     	; 0x2230 <__divsf3_pse+0x90>
    224e:	e0 95       	com	r30
    2250:	08 95       	ret

00002252 <__floatunsisf>:
    2252:	e8 94       	clt
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <__floatsisf+0x12>

00002256 <__floatsisf>:
    2256:	97 fb       	bst	r25, 7
    2258:	3e f4       	brtc	.+14     	; 0x2268 <__floatsisf+0x12>
    225a:	90 95       	com	r25
    225c:	80 95       	com	r24
    225e:	70 95       	com	r23
    2260:	61 95       	neg	r22
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	8f 4f       	sbci	r24, 0xFF	; 255
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	99 23       	and	r25, r25
    226a:	a9 f0       	breq	.+42     	; 0x2296 <__floatsisf+0x40>
    226c:	f9 2f       	mov	r31, r25
    226e:	96 e9       	ldi	r25, 0x96	; 150
    2270:	bb 27       	eor	r27, r27
    2272:	93 95       	inc	r25
    2274:	f6 95       	lsr	r31
    2276:	87 95       	ror	r24
    2278:	77 95       	ror	r23
    227a:	67 95       	ror	r22
    227c:	b7 95       	ror	r27
    227e:	f1 11       	cpse	r31, r1
    2280:	f8 cf       	rjmp	.-16     	; 0x2272 <__floatsisf+0x1c>
    2282:	fa f4       	brpl	.+62     	; 0x22c2 <__floatsisf+0x6c>
    2284:	bb 0f       	add	r27, r27
    2286:	11 f4       	brne	.+4      	; 0x228c <__floatsisf+0x36>
    2288:	60 ff       	sbrs	r22, 0
    228a:	1b c0       	rjmp	.+54     	; 0x22c2 <__floatsisf+0x6c>
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8f 4f       	sbci	r24, 0xFF	; 255
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <__floatsisf+0x6c>
    2296:	88 23       	and	r24, r24
    2298:	11 f0       	breq	.+4      	; 0x229e <__floatsisf+0x48>
    229a:	96 e9       	ldi	r25, 0x96	; 150
    229c:	11 c0       	rjmp	.+34     	; 0x22c0 <__floatsisf+0x6a>
    229e:	77 23       	and	r23, r23
    22a0:	21 f0       	breq	.+8      	; 0x22aa <__floatsisf+0x54>
    22a2:	9e e8       	ldi	r25, 0x8E	; 142
    22a4:	87 2f       	mov	r24, r23
    22a6:	76 2f       	mov	r23, r22
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <__floatsisf+0x5e>
    22aa:	66 23       	and	r22, r22
    22ac:	71 f0       	breq	.+28     	; 0x22ca <__floatsisf+0x74>
    22ae:	96 e8       	ldi	r25, 0x86	; 134
    22b0:	86 2f       	mov	r24, r22
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	2a f0       	brmi	.+10     	; 0x22c2 <__floatsisf+0x6c>
    22b8:	9a 95       	dec	r25
    22ba:	66 0f       	add	r22, r22
    22bc:	77 1f       	adc	r23, r23
    22be:	88 1f       	adc	r24, r24
    22c0:	da f7       	brpl	.-10     	; 0x22b8 <__floatsisf+0x62>
    22c2:	88 0f       	add	r24, r24
    22c4:	96 95       	lsr	r25
    22c6:	87 95       	ror	r24
    22c8:	97 f9       	bld	r25, 7
    22ca:	08 95       	ret

000022cc <__fp_cmp>:
    22cc:	99 0f       	add	r25, r25
    22ce:	00 08       	sbc	r0, r0
    22d0:	55 0f       	add	r21, r21
    22d2:	aa 0b       	sbc	r26, r26
    22d4:	e0 e8       	ldi	r30, 0x80	; 128
    22d6:	fe ef       	ldi	r31, 0xFE	; 254
    22d8:	16 16       	cp	r1, r22
    22da:	17 06       	cpc	r1, r23
    22dc:	e8 07       	cpc	r30, r24
    22de:	f9 07       	cpc	r31, r25
    22e0:	c0 f0       	brcs	.+48     	; 0x2312 <__fp_cmp+0x46>
    22e2:	12 16       	cp	r1, r18
    22e4:	13 06       	cpc	r1, r19
    22e6:	e4 07       	cpc	r30, r20
    22e8:	f5 07       	cpc	r31, r21
    22ea:	98 f0       	brcs	.+38     	; 0x2312 <__fp_cmp+0x46>
    22ec:	62 1b       	sub	r22, r18
    22ee:	73 0b       	sbc	r23, r19
    22f0:	84 0b       	sbc	r24, r20
    22f2:	95 0b       	sbc	r25, r21
    22f4:	39 f4       	brne	.+14     	; 0x2304 <__fp_cmp+0x38>
    22f6:	0a 26       	eor	r0, r26
    22f8:	61 f0       	breq	.+24     	; 0x2312 <__fp_cmp+0x46>
    22fa:	23 2b       	or	r18, r19
    22fc:	24 2b       	or	r18, r20
    22fe:	25 2b       	or	r18, r21
    2300:	21 f4       	brne	.+8      	; 0x230a <__fp_cmp+0x3e>
    2302:	08 95       	ret
    2304:	0a 26       	eor	r0, r26
    2306:	09 f4       	brne	.+2      	; 0x230a <__fp_cmp+0x3e>
    2308:	a1 40       	sbci	r26, 0x01	; 1
    230a:	a6 95       	lsr	r26
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	81 1d       	adc	r24, r1
    2310:	81 1d       	adc	r24, r1
    2312:	08 95       	ret

00002314 <__fp_inf>:
    2314:	97 f9       	bld	r25, 7
    2316:	9f 67       	ori	r25, 0x7F	; 127
    2318:	80 e8       	ldi	r24, 0x80	; 128
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	08 95       	ret

00002320 <__fp_nan>:
    2320:	9f ef       	ldi	r25, 0xFF	; 255
    2322:	80 ec       	ldi	r24, 0xC0	; 192
    2324:	08 95       	ret

00002326 <__fp_pscA>:
    2326:	00 24       	eor	r0, r0
    2328:	0a 94       	dec	r0
    232a:	16 16       	cp	r1, r22
    232c:	17 06       	cpc	r1, r23
    232e:	18 06       	cpc	r1, r24
    2330:	09 06       	cpc	r0, r25
    2332:	08 95       	ret

00002334 <__fp_pscB>:
    2334:	00 24       	eor	r0, r0
    2336:	0a 94       	dec	r0
    2338:	12 16       	cp	r1, r18
    233a:	13 06       	cpc	r1, r19
    233c:	14 06       	cpc	r1, r20
    233e:	05 06       	cpc	r0, r21
    2340:	08 95       	ret

00002342 <__fp_round>:
    2342:	09 2e       	mov	r0, r25
    2344:	03 94       	inc	r0
    2346:	00 0c       	add	r0, r0
    2348:	11 f4       	brne	.+4      	; 0x234e <__fp_round+0xc>
    234a:	88 23       	and	r24, r24
    234c:	52 f0       	brmi	.+20     	; 0x2362 <__fp_round+0x20>
    234e:	bb 0f       	add	r27, r27
    2350:	40 f4       	brcc	.+16     	; 0x2362 <__fp_round+0x20>
    2352:	bf 2b       	or	r27, r31
    2354:	11 f4       	brne	.+4      	; 0x235a <__fp_round+0x18>
    2356:	60 ff       	sbrs	r22, 0
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <__fp_round+0x20>
    235a:	6f 5f       	subi	r22, 0xFF	; 255
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	8f 4f       	sbci	r24, 0xFF	; 255
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	08 95       	ret

00002364 <__fp_split3>:
    2364:	57 fd       	sbrc	r21, 7
    2366:	90 58       	subi	r25, 0x80	; 128
    2368:	44 0f       	add	r20, r20
    236a:	55 1f       	adc	r21, r21
    236c:	59 f0       	breq	.+22     	; 0x2384 <__fp_splitA+0x10>
    236e:	5f 3f       	cpi	r21, 0xFF	; 255
    2370:	71 f0       	breq	.+28     	; 0x238e <__fp_splitA+0x1a>
    2372:	47 95       	ror	r20

00002374 <__fp_splitA>:
    2374:	88 0f       	add	r24, r24
    2376:	97 fb       	bst	r25, 7
    2378:	99 1f       	adc	r25, r25
    237a:	61 f0       	breq	.+24     	; 0x2394 <__fp_splitA+0x20>
    237c:	9f 3f       	cpi	r25, 0xFF	; 255
    237e:	79 f0       	breq	.+30     	; 0x239e <__fp_splitA+0x2a>
    2380:	87 95       	ror	r24
    2382:	08 95       	ret
    2384:	12 16       	cp	r1, r18
    2386:	13 06       	cpc	r1, r19
    2388:	14 06       	cpc	r1, r20
    238a:	55 1f       	adc	r21, r21
    238c:	f2 cf       	rjmp	.-28     	; 0x2372 <__fp_split3+0xe>
    238e:	46 95       	lsr	r20
    2390:	f1 df       	rcall	.-30     	; 0x2374 <__fp_splitA>
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <__fp_splitA+0x30>
    2394:	16 16       	cp	r1, r22
    2396:	17 06       	cpc	r1, r23
    2398:	18 06       	cpc	r1, r24
    239a:	99 1f       	adc	r25, r25
    239c:	f1 cf       	rjmp	.-30     	; 0x2380 <__fp_splitA+0xc>
    239e:	86 95       	lsr	r24
    23a0:	71 05       	cpc	r23, r1
    23a2:	61 05       	cpc	r22, r1
    23a4:	08 94       	sec
    23a6:	08 95       	ret

000023a8 <__fp_zero>:
    23a8:	e8 94       	clt

000023aa <__fp_szero>:
    23aa:	bb 27       	eor	r27, r27
    23ac:	66 27       	eor	r22, r22
    23ae:	77 27       	eor	r23, r23
    23b0:	cb 01       	movw	r24, r22
    23b2:	97 f9       	bld	r25, 7
    23b4:	08 95       	ret

000023b6 <__mulsf3>:
    23b6:	0b d0       	rcall	.+22     	; 0x23ce <__mulsf3x>
    23b8:	c4 cf       	rjmp	.-120    	; 0x2342 <__fp_round>
    23ba:	b5 df       	rcall	.-150    	; 0x2326 <__fp_pscA>
    23bc:	28 f0       	brcs	.+10     	; 0x23c8 <__mulsf3+0x12>
    23be:	ba df       	rcall	.-140    	; 0x2334 <__fp_pscB>
    23c0:	18 f0       	brcs	.+6      	; 0x23c8 <__mulsf3+0x12>
    23c2:	95 23       	and	r25, r21
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <__mulsf3+0x12>
    23c6:	a6 cf       	rjmp	.-180    	; 0x2314 <__fp_inf>
    23c8:	ab cf       	rjmp	.-170    	; 0x2320 <__fp_nan>
    23ca:	11 24       	eor	r1, r1
    23cc:	ee cf       	rjmp	.-36     	; 0x23aa <__fp_szero>

000023ce <__mulsf3x>:
    23ce:	ca df       	rcall	.-108    	; 0x2364 <__fp_split3>
    23d0:	a0 f3       	brcs	.-24     	; 0x23ba <__mulsf3+0x4>

000023d2 <__mulsf3_pse>:
    23d2:	95 9f       	mul	r25, r21
    23d4:	d1 f3       	breq	.-12     	; 0x23ca <__mulsf3+0x14>
    23d6:	95 0f       	add	r25, r21
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	55 1f       	adc	r21, r21
    23dc:	62 9f       	mul	r22, r18
    23de:	f0 01       	movw	r30, r0
    23e0:	72 9f       	mul	r23, r18
    23e2:	bb 27       	eor	r27, r27
    23e4:	f0 0d       	add	r31, r0
    23e6:	b1 1d       	adc	r27, r1
    23e8:	63 9f       	mul	r22, r19
    23ea:	aa 27       	eor	r26, r26
    23ec:	f0 0d       	add	r31, r0
    23ee:	b1 1d       	adc	r27, r1
    23f0:	aa 1f       	adc	r26, r26
    23f2:	64 9f       	mul	r22, r20
    23f4:	66 27       	eor	r22, r22
    23f6:	b0 0d       	add	r27, r0
    23f8:	a1 1d       	adc	r26, r1
    23fa:	66 1f       	adc	r22, r22
    23fc:	82 9f       	mul	r24, r18
    23fe:	22 27       	eor	r18, r18
    2400:	b0 0d       	add	r27, r0
    2402:	a1 1d       	adc	r26, r1
    2404:	62 1f       	adc	r22, r18
    2406:	73 9f       	mul	r23, r19
    2408:	b0 0d       	add	r27, r0
    240a:	a1 1d       	adc	r26, r1
    240c:	62 1f       	adc	r22, r18
    240e:	83 9f       	mul	r24, r19
    2410:	a0 0d       	add	r26, r0
    2412:	61 1d       	adc	r22, r1
    2414:	22 1f       	adc	r18, r18
    2416:	74 9f       	mul	r23, r20
    2418:	33 27       	eor	r19, r19
    241a:	a0 0d       	add	r26, r0
    241c:	61 1d       	adc	r22, r1
    241e:	23 1f       	adc	r18, r19
    2420:	84 9f       	mul	r24, r20
    2422:	60 0d       	add	r22, r0
    2424:	21 1d       	adc	r18, r1
    2426:	82 2f       	mov	r24, r18
    2428:	76 2f       	mov	r23, r22
    242a:	6a 2f       	mov	r22, r26
    242c:	11 24       	eor	r1, r1
    242e:	9f 57       	subi	r25, 0x7F	; 127
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	8a f0       	brmi	.+34     	; 0x2456 <__mulsf3_pse+0x84>
    2434:	e1 f0       	breq	.+56     	; 0x246e <__mulsf3_pse+0x9c>
    2436:	88 23       	and	r24, r24
    2438:	4a f0       	brmi	.+18     	; 0x244c <__mulsf3_pse+0x7a>
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	bb 1f       	adc	r27, r27
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	91 50       	subi	r25, 0x01	; 1
    2448:	50 40       	sbci	r21, 0x00	; 0
    244a:	a9 f7       	brne	.-22     	; 0x2436 <__mulsf3_pse+0x64>
    244c:	9e 3f       	cpi	r25, 0xFE	; 254
    244e:	51 05       	cpc	r21, r1
    2450:	70 f0       	brcs	.+28     	; 0x246e <__mulsf3_pse+0x9c>
    2452:	60 cf       	rjmp	.-320    	; 0x2314 <__fp_inf>
    2454:	aa cf       	rjmp	.-172    	; 0x23aa <__fp_szero>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	ec f3       	brlt	.-6      	; 0x2454 <__mulsf3_pse+0x82>
    245a:	98 3e       	cpi	r25, 0xE8	; 232
    245c:	dc f3       	brlt	.-10     	; 0x2454 <__mulsf3_pse+0x82>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f7 95       	ror	r31
    2468:	e7 95       	ror	r30
    246a:	9f 5f       	subi	r25, 0xFF	; 255
    246c:	c1 f7       	brne	.-16     	; 0x245e <__mulsf3_pse+0x8c>
    246e:	fe 2b       	or	r31, r30
    2470:	88 0f       	add	r24, r24
    2472:	91 1d       	adc	r25, r1
    2474:	96 95       	lsr	r25
    2476:	87 95       	ror	r24
    2478:	97 f9       	bld	r25, 7
    247a:	08 95       	ret
    247c:	11 f4       	brne	.+4      	; 0x2482 <__mulsf3_pse+0xb0>
    247e:	0e f4       	brtc	.+2      	; 0x2482 <__mulsf3_pse+0xb0>
    2480:	4f cf       	rjmp	.-354    	; 0x2320 <__fp_nan>
    2482:	3e c0       	rjmp	.+124    	; 0x2500 <__fp_mpack>

00002484 <sqrt>:
    2484:	77 df       	rcall	.-274    	; 0x2374 <__fp_splitA>
    2486:	d0 f3       	brcs	.-12     	; 0x247c <__mulsf3_pse+0xaa>
    2488:	99 23       	and	r25, r25
    248a:	d9 f3       	breq	.-10     	; 0x2482 <__mulsf3_pse+0xb0>
    248c:	ce f3       	brts	.-14     	; 0x2480 <__mulsf3_pse+0xae>
    248e:	9f 57       	subi	r25, 0x7F	; 127
    2490:	55 0b       	sbc	r21, r21
    2492:	87 ff       	sbrs	r24, 7
    2494:	43 d0       	rcall	.+134    	; 0x251c <__fp_norm2>
    2496:	00 24       	eor	r0, r0
    2498:	a0 e6       	ldi	r26, 0x60	; 96
    249a:	40 ea       	ldi	r20, 0xA0	; 160
    249c:	90 01       	movw	r18, r0
    249e:	80 58       	subi	r24, 0x80	; 128
    24a0:	56 95       	lsr	r21
    24a2:	97 95       	ror	r25
    24a4:	28 f4       	brcc	.+10     	; 0x24b0 <sqrt+0x2c>
    24a6:	80 5c       	subi	r24, 0xC0	; 192
    24a8:	66 0f       	add	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	20 f0       	brcs	.+8      	; 0x24b8 <sqrt+0x34>
    24b0:	26 17       	cp	r18, r22
    24b2:	37 07       	cpc	r19, r23
    24b4:	48 07       	cpc	r20, r24
    24b6:	30 f4       	brcc	.+12     	; 0x24c4 <sqrt+0x40>
    24b8:	62 1b       	sub	r22, r18
    24ba:	73 0b       	sbc	r23, r19
    24bc:	84 0b       	sbc	r24, r20
    24be:	20 29       	or	r18, r0
    24c0:	31 29       	or	r19, r1
    24c2:	4a 2b       	or	r20, r26
    24c4:	a6 95       	lsr	r26
    24c6:	17 94       	ror	r1
    24c8:	07 94       	ror	r0
    24ca:	20 25       	eor	r18, r0
    24cc:	31 25       	eor	r19, r1
    24ce:	4a 27       	eor	r20, r26
    24d0:	58 f7       	brcc	.-42     	; 0x24a8 <sqrt+0x24>
    24d2:	66 0f       	add	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	88 1f       	adc	r24, r24
    24d8:	20 f0       	brcs	.+8      	; 0x24e2 <sqrt+0x5e>
    24da:	26 17       	cp	r18, r22
    24dc:	37 07       	cpc	r19, r23
    24de:	48 07       	cpc	r20, r24
    24e0:	30 f4       	brcc	.+12     	; 0x24ee <sqrt+0x6a>
    24e2:	62 0b       	sbc	r22, r18
    24e4:	73 0b       	sbc	r23, r19
    24e6:	84 0b       	sbc	r24, r20
    24e8:	20 0d       	add	r18, r0
    24ea:	31 1d       	adc	r19, r1
    24ec:	41 1d       	adc	r20, r1
    24ee:	a0 95       	com	r26
    24f0:	81 f7       	brne	.-32     	; 0x24d2 <sqrt+0x4e>
    24f2:	b9 01       	movw	r22, r18
    24f4:	84 2f       	mov	r24, r20
    24f6:	91 58       	subi	r25, 0x81	; 129
    24f8:	88 0f       	add	r24, r24
    24fa:	96 95       	lsr	r25
    24fc:	87 95       	ror	r24
    24fe:	08 95       	ret

00002500 <__fp_mpack>:
    2500:	9f 3f       	cpi	r25, 0xFF	; 255
    2502:	31 f0       	breq	.+12     	; 0x2510 <__fp_mpack_finite+0xc>

00002504 <__fp_mpack_finite>:
    2504:	91 50       	subi	r25, 0x01	; 1
    2506:	20 f4       	brcc	.+8      	; 0x2510 <__fp_mpack_finite+0xc>
    2508:	87 95       	ror	r24
    250a:	77 95       	ror	r23
    250c:	67 95       	ror	r22
    250e:	b7 95       	ror	r27
    2510:	88 0f       	add	r24, r24
    2512:	91 1d       	adc	r25, r1
    2514:	96 95       	lsr	r25
    2516:	87 95       	ror	r24
    2518:	97 f9       	bld	r25, 7
    251a:	08 95       	ret

0000251c <__fp_norm2>:
    251c:	91 50       	subi	r25, 0x01	; 1
    251e:	50 40       	sbci	r21, 0x00	; 0
    2520:	66 0f       	add	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	88 1f       	adc	r24, r24
    2526:	d2 f7       	brpl	.-12     	; 0x251c <__fp_norm2>
    2528:	08 95       	ret

0000252a <_exit>:
    252a:	f8 94       	cli

0000252c <__stop_program>:
    252c:	ff cf       	rjmp	.-2      	; 0x252c <__stop_program>
